"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8912],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=i.createContext({}),s=function(e){var t=i.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),f=s(a),m=n,k=f["".concat(p,".").concat(m)]||f[m]||c[m]||l;return a?i.createElement(k,o(o({ref:t},u),{},{components:a})):i.createElement(k,o({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=f;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:n,o[1]=r;for(var s=2;s<l;s++)o[s]=a[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}f.displayName="MDXCreateElement"},1446:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var i=a(7462),n=(a(7294),a(3905));const l={sidebar_label:"openai_utils",title:"autogen.oai.openai_utils"},o=void 0,r={unversionedId:"reference/autogen/oai/openai_utils",id:"reference/autogen/oai/openai_utils",isDocsHomePage:!1,title:"autogen.oai.openai_utils",description:"get\\_key",source:"@site/docs/reference/autogen/oai/openai_utils.md",sourceDirName:"reference/autogen/oai",slug:"/reference/autogen/oai/openai_utils",permalink:"/FLAML/docs/reference/autogen/oai/openai_utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/oai/openai_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"openai_utils",title:"autogen.oai.openai_utils"},sidebar:"referenceSideBar",previous:{title:"completion",permalink:"/FLAML/docs/reference/autogen/oai/completion"},next:{title:"code_utils",permalink:"/FLAML/docs/reference/autogen/code_utils"}},p=[{value:"get_key",id:"get_key",children:[],level:4},{value:"get_config_list",id:"get_config_list",children:[],level:4},{value:"config_list_openai_aoai",id:"config_list_openai_aoai",children:[],level:4},{value:"config_list_gpt4_gpt35",id:"config_list_gpt4_gpt35",children:[],level:4}],s={toc:p};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"get_key"},"get","_","key"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_key(config)\n")),(0,n.kt)("p",null,"Get a unique identifier of a configuration."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"config")," ",(0,n.kt)("em",{parentName:"li"},"dict or list")," - A configuration.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple")," - A unique identifier which can be used as a key for a dict.")),(0,n.kt)("h4",{id:"get_config_list"},"get","_","config","_","list"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_config_list(api_keys: List, api_bases: Optional[List] = None, api_type: Optional[str] = None, api_version: Optional[str] = None) -> List[Dict]\n")),(0,n.kt)("p",null,"Get a list of configs for openai api calls."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"api_keys")," ",(0,n.kt)("em",{parentName:"li"},"list")," - The api keys for openai api calls."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"api_bases")," ",(0,n.kt)("em",{parentName:"li"},"list, optional")," - The api bases for openai api calls."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"api_type")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The api type for openai api calls."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"api_version")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The api version for openai api calls.")),(0,n.kt)("h4",{id:"config_list_openai_aoai"},"config","_","list","_","openai","_","aoai"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_openai_aoai(key_file_path: Optional[str] = ".", openai_api_key_file: Optional[str] = "key_openai.txt", aoai_api_key_file: Optional[str] = "key_aoai.txt", aoai_api_base_file: Optional[str] = "base_aoai.txt") -> List[Dict]\n')),(0,n.kt)("p",null,"Get a list of configs for openai + azure openai api calls."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,n.kt)("h4",{id:"config_list_gpt4_gpt35"},"config","_","list","_","gpt4","_","gpt35"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_gpt4_gpt35(key_file_path: Optional[str] = ".", openai_api_key_file: Optional[str] = "key_openai.txt", aoai_api_key_file: Optional[str] = "key_aoai.txt", aoai_api_base_file: Optional[str] = "base_aoai.txt") -> List[Dict]\n')),(0,n.kt)("p",null,"Get a list of configs for gpt-4 followed by gpt-3.5 api calls."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,n.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")))}u.isMDXComponent=!0}}]);