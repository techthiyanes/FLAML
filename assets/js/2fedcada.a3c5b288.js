"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1581],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3221:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={},i="AutoGen - OpenAI",s={unversionedId:"Examples/AutoGen-OpenAI",id:"Examples/AutoGen-OpenAI",isDocsHomePage:!1,title:"AutoGen - OpenAI",description:"FLAML offers a cost-effective hyperparameter optimization technique EcoOptiGen for tuning Large Language Models. Our study finds that tuning hyperparameters can significantly improve the utility of them.",source:"@site/docs/Examples/AutoGen-OpenAI.md",sourceDirName:"Examples",slug:"/Examples/AutoGen-OpenAI",permalink:"/FLAML/docs/Examples/AutoGen-OpenAI",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/Examples/AutoGen-OpenAI.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Zero Shot AutoML",permalink:"/FLAML/docs/Use-Cases/Zero-Shot-AutoML"},next:{title:"AutoML - Classification",permalink:"/FLAML/docs/Examples/AutoML-Classification"}},l=[{value:"Prerequisites",id:"prerequisites",children:[],level:3},{value:"Load the dataset",id:"load-the-dataset",children:[],level:3},{value:"Define the metric",id:"define-the-metric",children:[],level:3},{value:"Tune the hyperparameters",id:"tune-the-hyperparameters",children:[{value:"Output tuning results",id:"output-tuning-results",children:[],level:4},{value:"Make a request with the tuned config",id:"make-a-request-with-the-tuned-config",children:[],level:4},{value:"Evaluate the success rate on the test data",id:"evaluate-the-success-rate-on-the-test-data",children:[],level:4}],level:3}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"autogen---openai"},"AutoGen - OpenAI"),(0,o.kt)("p",null,"FLAML offers a cost-effective hyperparameter optimization technique ",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2303.04673"},"EcoOptiGen")," for tuning Large Language Models. Our study finds that tuning hyperparameters can significantly improve the utility of them.\nIn this example, we will tune several hyperparameters for the OpenAI's completion API, including the temperature, prompt and n (number of completions), to optimize the inference performance for a code generation task."),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Install the ","[autogen,blendsearch]"," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "flaml[autogen,blendsearch] datasets"\n')),(0,o.kt)("p",null,"Setup your OpenAI key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nif "OPENAI_API_KEY" not in os.environ:\n    os.environ["OPENAI_API_KEY"] = "<your OpenAI API key here>"\n')),(0,o.kt)("p",null,"If you use Azure OpenAI, set up Azure using the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import openai\n\nopenai.api_type = "azure"\nopenai.api_base = "https://<your_endpoint>.openai.azure.com/"\nopenai.api_version = "2023-03-15-preview"  # change if necessary\n')),(0,o.kt)("h3",{id:"load-the-dataset"},"Load the dataset"),(0,o.kt)("p",null,'We use the HumanEval dataset as an example. The dataset contains 164 examples. We use the first 20 for tuning the generation hyperparameters and the remaining for evaluation. In each example, the "prompt" is the prompt string for eliciting the code generation, "test" is the Python code for unit test for the example, and "entry_point" is the function name to be tested.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import datasets\n\nseed = 41\ndata = datasets.load_dataset("openai_humaneval")["test"].shuffle(seed=seed)\nn_tune_data = 20\ntune_data = [\n    {\n        "definition": data[x]["prompt"],\n        "test": data[x]["test"],\n        "entry_point": data[x]["entry_point"],\n    }\n    for x in range(n_tune_data)\n]\ntest_data = [\n    {\n        "definition": data[x]["prompt"],\n        "test": data[x]["test"],\n        "entry_point": data[x]["entry_point"],\n    }\n    for x in range(n_tune_data, len(data))\n]\n')),(0,o.kt)("h3",{id:"define-the-metric"},"Define the metric"),(0,o.kt)("p",null,"Before starting tuning, you need to define the metric for the optimization. For each code generation task, we can use the model to generate multiple candidate responses, and then select one from them. If the final selected response can pass a unit test, we consider the task as successfully solved. Then we can define the average success rate on a collection of tasks as the optimization metric."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from functools import partial\nfrom flaml.autogen.code_utils import eval_function_completions, generate_assertions\n\neval_with_generated_assertions = partial(\n    eval_function_completions, assertions=generate_assertions,\n)\n")),(0,o.kt)("p",null,"This function will first generate assertion statements for each problem. Then, it uses the assertions to select the generated responses."),(0,o.kt)("h3",{id:"tune-the-hyperparameters"},"Tune the hyperparameters"),(0,o.kt)("p",null,"The tuning will be performed under the specified optimization budgets."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"inference_budget is the target average inference budget per instance in the benchmark. For example, 0.02 means the target inference budget is 0.02 dollars, which translates to 1000 tokens (input + output combined) if the text Davinci model is used."),(0,o.kt)("li",{parentName:"ul"},"optimization_budget is the total budget allowed to perform the tuning. For example, 5 means 5 dollars are allowed in total, which translates to 250K tokens for the text Davinci model."),(0,o.kt)("li",{parentName:"ul"},"num_sumples is the number of different hyperparameter configurations which is allowed to try. The tuning will stop after either num_samples trials or after optimization_budget dollars spent, whichever happens first. -1 means no hard restriction in the number of trials and the actual number is decided by optimization_budget.")),(0,o.kt)("p",null,"Users can specify tuning data, optimization metric, optimization mode, evaluation function, search spaces etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from flaml import oai\n\nconfig, analysis = oai.Completion.tune(\n    data=tune_data,  # the data for tuning\n    metric="success",  # the metric to optimize\n    mode="max",  # the optimization mode\n    eval_func=eval_with_generated_assertions,  # the evaluation function to return the success metrics\n    # log_file_name="logs/humaneval.log",  # the log file name\n    inference_budget=0.05,  # the inference budget (dollar per instance)\n    optimization_budget=3,  # the optimization budget (dollar in total)\n    # num_samples can further limit the number of trials for different hyperparameter configurations;\n    # -1 means decided by the optimization budget only\n    num_samples=-1,\n    prompt=[\n        "{definition}",\n        "# Python 3{definition}",\n        "Complete the following Python function:{definition}",\n    ],  # the prompt templates to choose from\n    stop=[["\\nclass", "\\ndef", "\\nif", "\\nprint"], None],  # the stop sequences\n)\n')),(0,o.kt)("h4",{id:"output-tuning-results"},"Output tuning results"),(0,o.kt)("p",null,"After the tuning, we can print out the optimized config and the result found by FLAML:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'print("optimized config", config)\nprint("best result on tuning data", analysis.best_result)\n')),(0,o.kt)("h4",{id:"make-a-request-with-the-tuned-config"},"Make a request with the tuned config"),(0,o.kt)("p",null,"We can apply the tuned config to the request for an instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"response = oai.Completion.create(context=tune_data[1], **config)\nprint(response)\nprint(eval_with_generated_assertions(oai.Completion.extract_text(response), **tune_data[1]))\n")),(0,o.kt)("h4",{id:"evaluate-the-success-rate-on-the-test-data"},"Evaluate the success rate on the test data"),(0,o.kt)("p",null,"You can use flaml's ",(0,o.kt)("inlineCode",{parentName:"p"},"oai.Completion.test")," to evaluate the performance of an entire dataset with the tuned config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'result = oai.Completion.test(test_data, **config)\nprint("performance on test data with the tuned config:", result)\n')),(0,o.kt)("p",null,"The result will vary with the inference budget and optimization budget."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/FLAML/blob/main/notebook/autogen_openai_completion.ipynb"},"Link to notebook")," | ",(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/autogen_openai_completion.ipynb"},"Open in colab")))}u.isMDXComponent=!0}}]);