"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4364],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return c}});var a=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,a,o=function(t,e){if(null==t)return{};var r,a,o={},n=Object.keys(t);for(a=0;a<n.length;a++)r=n[a],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(a=0;a<n.length;a++)r=n[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var i=a.createContext({}),m=function(t){var e=a.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},u=function(t){var e=m(t.components);return a.createElement(i.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var r=t.components,o=t.mdxType,n=t.originalType,i=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),f=m(r),c=o,d=f["".concat(i,".").concat(c)]||f[c]||p[c]||n;return r?a.createElement(d,l(l({ref:e},u),{},{components:r})):a.createElement(d,l({ref:e},u))}));function c(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var n=r.length,l=new Array(n);l[0]=f;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:o,l[1]=s;for(var m=2;m<n;m++)l[m]=r[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7308:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return m},toc:function(){return u},default:function(){return f}});var a=r(7462),o=r(3366),n=(r(7294),r(3905)),l=["components"],s={},i="AutoML - Time Series Forecast",m={unversionedId:"Examples/AutoML-Time series forecast",id:"Examples/AutoML-Time series forecast",isDocsHomePage:!1,title:"AutoML - Time Series Forecast",description:"Prerequisites",source:"@site/docs/Examples/AutoML-Time series forecast.md",sourceDirName:"Examples",slug:"/Examples/AutoML-Time series forecast",permalink:"/FLAML/docs/Examples/AutoML-Time series forecast",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/Examples/AutoML-Time series forecast.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"AutoML - Regression",permalink:"/FLAML/docs/Examples/AutoML-Regression"},next:{title:"AutoML for LightGBM",permalink:"/FLAML/docs/Examples/AutoML-for-LightGBM"}},u=[{value:"Prerequisites",id:"prerequisites",children:[],level:3},{value:"Univariate time series",id:"univariate-time-series",children:[{value:"Sample output",id:"sample-output",children:[],level:4}],level:3},{value:"Multivariate time series",id:"multivariate-time-series",children:[{value:"Sample output",id:"sample-output-1",children:[],level:4},{value:"Compute and plot predictions",id:"compute-and-plot-predictions",children:[],level:4}],level:3}],p={toc:u};function f(t){var e=t.components,s=(0,o.Z)(t,l);return(0,n.kt)("wrapper",(0,a.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"automl---time-series-forecast"},"AutoML - Time Series Forecast"),(0,n.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("p",null,"Install the ","[ts_forecast]"," option."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "flaml[ts_forecast]"\n')),(0,n.kt)("h3",{id:"univariate-time-series"},"Univariate time series"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nfrom flaml import AutoML\n\nX_train = np.arange('2014-01', '2021-01', dtype='datetime64[M]')\ny_train = np.random.random(size=72)\nautoml = AutoML()\nautoml.fit(X_train=X_train[:72],  # a single column of timestamp\n           y_train=y_train,  # value for each timestamp\n           period=12,  # time horizon to forecast, e.g., 12 months\n           task='ts_forecast', time_budget=15,  # time budget in seconds\n           log_file_name=\"ts_forecast.log\",\n          )\nprint(automl.predict(X_train[72:]))\n")),(0,n.kt)("h4",{id:"sample-output"},"Sample output"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[flaml.automl: 11-15 18:44:49] {1485} INFO - Data split method: time\nINFO:flaml.automl:Data split method: time\n[flaml.automl: 11-15 18:44:49] {1489} INFO - Evaluation method: cv\nINFO:flaml.automl:Evaluation method: cv\n[flaml.automl: 11-15 18:44:49] {1540} INFO - Minimizing error metric: mape\nINFO:flaml.automl:Minimizing error metric: mape\n[flaml.automl: 11-15 18:44:49] {1577} INFO - List of ML learners in AutoML Run: ['prophet', 'arima', 'sarimax']\nINFO:flaml.automl:List of ML learners in AutoML Run: ['prophet', 'arima', 'sarimax']\n[flaml.automl: 11-15 18:44:49] {1826} INFO - iteration 0, current learner prophet\nINFO:flaml.automl:iteration 0, current learner prophet\n[flaml.automl: 11-15 18:45:00] {1944} INFO - Estimated sufficient time budget=104159s. Estimated necessary time budget=104s.\nINFO:flaml.automl:Estimated sufficient time budget=104159s. Estimated necessary time budget=104s.\n[flaml.automl: 11-15 18:45:00] {2029} INFO -  at 10.5s, estimator prophet's best error=1.5681,  best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 10.5s,    estimator prophet's best error=1.5681,  best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:00] {1826} INFO - iteration 1, current learner arima\nINFO:flaml.automl:iteration 1, current learner arima\n[flaml.automl: 11-15 18:45:00] {2029} INFO -  at 10.7s, estimator arima's best error=2.3515,    best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 10.7s,    estimator arima's best error=2.3515,    best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:00] {1826} INFO - iteration 2, current learner arima\nINFO:flaml.automl:iteration 2, current learner arima\n[flaml.automl: 11-15 18:45:01] {2029} INFO -  at 11.5s, estimator arima's best error=2.1774,    best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 11.5s,    estimator arima's best error=2.1774,    best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:01] {1826} INFO - iteration 3, current learner arima\nINFO:flaml.automl:iteration 3, current learner arima\n[flaml.automl: 11-15 18:45:01] {2029} INFO -  at 11.9s, estimator arima's best error=2.1774,    best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 11.9s,    estimator arima's best error=2.1774,    best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:01] {1826} INFO - iteration 4, current learner arima\nINFO:flaml.automl:iteration 4, current learner arima\n[flaml.automl: 11-15 18:45:02] {2029} INFO -  at 12.9s, estimator arima's best error=1.8560,    best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 12.9s,    estimator arima's best error=1.8560,    best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:02] {1826} INFO - iteration 5, current learner arima\nINFO:flaml.automl:iteration 5, current learner arima\n[flaml.automl: 11-15 18:45:04] {2029} INFO -  at 14.4s, estimator arima's best error=1.8560,    best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 14.4s,    estimator arima's best error=1.8560,    best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:04] {1826} INFO - iteration 6, current learner sarimax\nINFO:flaml.automl:iteration 6, current learner sarimax\n[flaml.automl: 11-15 18:45:04] {2029} INFO -  at 14.7s, estimator sarimax's best error=2.3515,  best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 14.7s,    estimator sarimax's best error=2.3515,  best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:04] {1826} INFO - iteration 7, current learner sarimax\nINFO:flaml.automl:iteration 7, current learner sarimax\n[flaml.automl: 11-15 18:45:04] {2029} INFO -  at 15.0s, estimator sarimax's best error=1.6371,  best estimator prophet's best error=1.5681\nINFO:flaml.automl: at 15.0s,    estimator sarimax's best error=1.6371,  best estimator prophet's best error=1.5681\n[flaml.automl: 11-15 18:45:05] {2242} INFO - retrain prophet for 0.5s\nINFO:flaml.automl:retrain prophet for 0.5s\n[flaml.automl: 11-15 18:45:05] {2247} INFO - retrained model: <prophet.forecaster.Prophet object at 0x7f042ba1da50>\nINFO:flaml.automl:retrained model: <prophet.forecaster.Prophet object at 0x7f042ba1da50>\n[flaml.automl: 11-15 18:45:05] {1608} INFO - fit succeeded\nINFO:flaml.automl:fit succeeded\n[flaml.automl: 11-15 18:45:05] {1610} INFO - Time taken to find the best model: 10.450132608413696\nINFO:flaml.automl:Time taken to find the best model: 10.450132608413696\n0     0.384715\n1     0.191349\n2     0.372324\n3     0.814549\n4     0.269616\n5     0.470667\n6     0.603665\n7     0.256773\n8     0.408787\n9     0.663065\n10    0.619943\n11    0.090284\nName: yhat, dtype: float64\n")),(0,n.kt)("h3",{id:"multivariate-time-series"},"Multivariate time series"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import statsmodels.api as sm\n\ndata = sm.datasets.co2.load_pandas().data\n# data is given in weeks, but the task is to predict monthly, so use monthly averages instead\ndata = data['co2'].resample('MS').mean()\ndata = data.fillna(data.bfill())  # makes sure there are no missing values\ndata = data.to_frame().reset_index()\nnum_samples = data.shape[0]\ntime_horizon = 12\nsplit_idx = num_samples - time_horizon\ntrain_df = data[:split_idx]  # train_df is a dataframe with two columns: timestamp and label\nX_test = data[split_idx:]['index'].to_frame()  # X_test is a dataframe with dates for prediction\ny_test = data[split_idx:]['co2']  # y_test is a series of the values corresponding to the dates for prediction\n\nfrom flaml import AutoML\n\nautoml = AutoML()\nsettings = {\n    \"time_budget\": 10,  # total running time in seconds\n    \"metric\": 'mape',  # primary metric for validation: 'mape' is generally used for forecast tasks\n    \"task\": 'ts_forecast',  # task type\n    \"log_file_name\": 'CO2_forecast.log',  # flaml log file\n    \"eval_method\": \"holdout\",  # validation method can be chosen from ['auto', 'holdout', 'cv']\n    \"seed\": 7654321,  # random seed\n}\n\nautoml.fit(dataframe=train_df,  # training data\n           label='co2',  # label column\n           period=time_horizon,  # key word argument 'period' must be included for forecast task)\n           **settings)\n")),(0,n.kt)("h4",{id:"sample-output-1"},"Sample output"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[flaml.automl: 11-15 18:54:12] {1485} INFO - Data split method: time\nINFO:flaml.automl:Data split method: time\n[flaml.automl: 11-15 18:54:12] {1489} INFO - Evaluation method: holdout\nINFO:flaml.automl:Evaluation method: holdout\n[flaml.automl: 11-15 18:54:13] {1540} INFO - Minimizing error metric: mape\nINFO:flaml.automl:Minimizing error metric: mape\n[flaml.automl: 11-15 18:54:13] {1577} INFO - List of ML learners in AutoML Run: ['prophet', 'arima', 'sarimax']\nINFO:flaml.automl:List of ML learners in AutoML Run: ['prophet', 'arima', 'sarimax']\n[flaml.automl: 11-15 18:54:13] {1826} INFO - iteration 0, current learner prophet\nINFO:flaml.automl:iteration 0, current learner prophet\n[flaml.automl: 11-15 18:54:15] {1944} INFO - Estimated sufficient time budget=25297s. Estimated necessary time budget=25s.\nINFO:flaml.automl:Estimated sufficient time budget=25297s. Estimated necessary time budget=25s.\n[flaml.automl: 11-15 18:54:15] {2029} INFO -  at 2.6s,  estimator prophet's best error=0.0008,  best estimator prophet's best error=0.0008\nINFO:flaml.automl: at 2.6s, estimator prophet's best error=0.0008,  best estimator prophet's best error=0.0008\n[flaml.automl: 11-15 18:54:15] {1826} INFO - iteration 1, current learner prophet\nINFO:flaml.automl:iteration 1, current learner prophet\n[flaml.automl: 11-15 18:54:18] {2029} INFO -  at 5.2s,  estimator prophet's best error=0.0008,  best estimator prophet's best error=0.0008\nINFO:flaml.automl: at 5.2s, estimator prophet's best error=0.0008,  best estimator prophet's best error=0.0008\n[flaml.automl: 11-15 18:54:18] {1826} INFO - iteration 2, current learner arima\nINFO:flaml.automl:iteration 2, current learner arima\n[flaml.automl: 11-15 18:54:18] {2029} INFO -  at 5.5s,  estimator arima's best error=0.0047,    best estimator prophet's best error=0.0008\nINFO:flaml.automl: at 5.5s, estimator arima's best error=0.0047,    best estimator prophet's best error=0.0008\n[flaml.automl: 11-15 18:54:18] {1826} INFO - iteration 3, current learner arima\nINFO:flaml.automl:iteration 3, current learner arima\n[flaml.automl: 11-15 18:54:18] {2029} INFO -  at 5.6s,  estimator arima's best error=0.0047,    best estimator prophet's best error=0.0008\nINFO:flaml.automl: at 5.6s, estimator arima's best error=0.0047,    best estimator prophet's best error=0.0008\n[flaml.automl: 11-15 18:54:18] {1826} INFO - iteration 4, current learner prophet\nINFO:flaml.automl:iteration 4, current learner prophet\n[flaml.automl: 11-15 18:54:21] {2029} INFO -  at 8.1s,  estimator prophet's best error=0.0005,  best estimator prophet's best error=0.0005\nINFO:flaml.automl: at 8.1s, estimator prophet's best error=0.0005,  best estimator prophet's best error=0.0005\n[flaml.automl: 11-15 18:54:21] {1826} INFO - iteration 5, current learner arima\nINFO:flaml.automl:iteration 5, current learner arima\n[flaml.automl: 11-15 18:54:21] {2029} INFO -  at 8.9s,  estimator arima's best error=0.0047,    best estimator prophet's best error=0.0005\nINFO:flaml.automl: at 8.9s, estimator arima's best error=0.0047,    best estimator prophet's best error=0.0005\n[flaml.automl: 11-15 18:54:21] {1826} INFO - iteration 6, current learner arima\nINFO:flaml.automl:iteration 6, current learner arima\n[flaml.automl: 11-15 18:54:22] {2029} INFO -  at 9.7s,  estimator arima's best error=0.0047,    best estimator prophet's best error=0.0005\nINFO:flaml.automl: at 9.7s, estimator arima's best error=0.0047,    best estimator prophet's best error=0.0005\n[flaml.automl: 11-15 18:54:22] {1826} INFO - iteration 7, current learner sarimax\nINFO:flaml.automl:iteration 7, current learner sarimax\n[flaml.automl: 11-15 18:54:23] {2029} INFO -  at 10.1s, estimator sarimax's best error=0.0047,  best estimator prophet's best error=0.0005\nINFO:flaml.automl: at 10.1s,    estimator sarimax's best error=0.0047,  best estimator prophet's best error=0.0005\n[flaml.automl: 11-15 18:54:23] {2242} INFO - retrain prophet for 0.9s\nINFO:flaml.automl:retrain prophet for 0.9s\n[flaml.automl: 11-15 18:54:23] {2247} INFO - retrained model: <prophet.forecaster.Prophet object at 0x7f0418e21f50>\nINFO:flaml.automl:retrained model: <prophet.forecaster.Prophet object at 0x7f0418e21f50>\n[flaml.automl: 11-15 18:54:23] {1608} INFO - fit succeeded\nINFO:flaml.automl:fit succeeded\n[flaml.automl: 11-15 18:54:23] {1610} INFO - Time taken to find the best model: 8.118467330932617\nINFO:flaml.automl:Time taken to find the best model: 8.118467330932617\n[flaml.automl: 11-15 18:54:23] {1624} WARNING - Time taken to find the best model is 81% of the provided time budget and not all estimators' hyperparameter search converged. Consider increasing the time budget.\nWARNING:flaml.automl:Time taken to find the best model is 81% of the provided time budget and not all estimators' hyperparameter search converged. Consider increasing the time budget.\n")),(0,n.kt)("h4",{id:"compute-and-plot-predictions"},"Compute and plot predictions"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"flaml_y_pred = automl.predict(X_test)\nimport matplotlib.pyplot as plt\n\nplt.plot(X_test, y_test, label='Actual level')\nplt.plot(X_test, flaml_y_pred, label='FLAML forecast')\nplt.xlabel('Date')\nplt.ylabel('CO2 Levels')\nplt.legend()\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"png",src:r(6806).Z})),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/microsoft/FLAML/blob/main/notebook/automl_time_series_forecast.ipynb"},"Link to notebook")," | ",(0,n.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_time_series_forecast.ipynb"},"Open in colab")))}f.isMDXComponent=!0},6806:function(t,e,r){e.Z=r.p+"assets/images/CO2-8a52a5b6467f2f3c0b4bc0fc516d5a62.png"}}]);