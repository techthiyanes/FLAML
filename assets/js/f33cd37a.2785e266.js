"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[428],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(a),f=r,c=u["".concat(s,".").concat(f)]||u[f]||m[f]||l;return a?n.createElement(c,i(i({ref:t},d),{},{components:a})):n.createElement(c,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3318:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_label:"data",title:"data"},i=void 0,o={unversionedId:"reference/data",id:"reference/data",isDocsHomePage:!1,title:"data",description:"load\\openml\\dataset",source:"@site/docs/reference/data.md",sourceDirName:"reference",slug:"/reference/data",permalink:"/FLAML/docs/reference/data",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/data.md",tags:[],version:"current",frontMatter:{sidebar_label:"data",title:"data"},sidebar:"referenceSideBar",previous:{title:"automl",permalink:"/FLAML/docs/reference/automl"},next:{title:"ml",permalink:"/FLAML/docs/reference/ml"}},s=[{value:"load_openml_dataset",id:"load_openml_dataset",children:[],level:4},{value:"load_openml_task",id:"load_openml_task",children:[],level:4},{value:"get_output_from_log",id:"get_output_from_log",children:[],level:4},{value:"concat",id:"concat",children:[],level:4},{value:"DataTransformer Objects",id:"datatransformer-objects",children:[{value:"fit_transform",id:"fit_transform",children:[],level:4},{value:"transform",id:"transform",children:[],level:4}],level:2}],p={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"load_openml_dataset"},"load","_","openml","_","dataset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def load_openml_dataset(dataset_id, data_dir=None, random_state=0, dataset_format="dataframe")\n')),(0,r.kt)("p",null,"Load dataset from open ML."),(0,r.kt)("p",null,"If the file is not cached locally, download it from open ML."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset_id")," - An integer of the dataset id in openml."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data_dir")," - A string of the path to store and load the data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"random_state")," - An integer of the random seed for splitting data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset_format")," - A string specifying the format of returned dataset. Default is 'dataframe'.\nCan choose from ","['dataframe', 'array']",".\nIf 'dataframe', the returned dataset will be a Pandas DataFrame.\nIf 'array', the returned dataset will be a NumPy array or a SciPy sparse matrix.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X_train")," - Training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X_test")," - Test data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y_train")," - A series or array of labels for training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y_test")," - A series or array of labels for test data.")),(0,r.kt)("h4",{id:"load_openml_task"},"load","_","openml","_","task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def load_openml_task(task_id, data_dir)\n")),(0,r.kt)("p",null,"Load task from open ML."),(0,r.kt)("p",null,"Use the first fold of the task.\nIf the file is not cached locally, download it from open ML."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"task_id")," - An integer of the task id in openml."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data_dir")," - A string of the path to store and load the data.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X_train")," - A dataframe of training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X_test")," - A dataframe of test data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y_train")," - A series of labels for training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y_test")," - A series of labels for test data.")),(0,r.kt)("h4",{id:"get_output_from_log"},"get","_","output","_","from","_","log"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_output_from_log(filename, time_budget)\n")),(0,r.kt)("p",null,"Get output from log file."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filename")," - A string of the log file name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_budget")," - A float of the time budget in seconds.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"search_time_list")," - A list of the finished time of each logged iter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"best_error_list")," - A list of the best validation error after each logged iter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"error_list")," - A list of the validation error of each logged iter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config_list")," - A list of the estimator, sample size and config of each logged iter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logged_metric_list")," - A list of the logged metric of each logged iter.")),(0,r.kt)("h4",{id:"concat"},"concat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def concat(X1, X2)\n")),(0,r.kt)("p",null,"concatenate two matrices vertically."),(0,r.kt)("h2",{id:"datatransformer-objects"},"DataTransformer Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class DataTransformer()\n")),(0,r.kt)("p",null,"Transform input training data."),(0,r.kt)("h4",{id:"fit_transform"},"fit","_","transform"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def fit_transform(X: Union[DataFrame, np.array], y, task)\n")),(0,r.kt)("p",null,"Fit transformer and process the input training data according to the task type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X")," - A numpy array or a pandas dataframe of training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y")," - A numpy array or a pandas series of labels."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"task")," - A string of the task type, e.g.,\n'classification', 'regression', 'ts_forecast', 'rank'.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X")," - Processed numpy array or pandas dataframe of training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y")," - Processed numpy array or pandas series of labels.")),(0,r.kt)("h4",{id:"transform"},"transform"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def transform(X: Union[DataFrame, np.array])\n")),(0,r.kt)("p",null,"Process data using fit transformer."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X")," - A numpy array or a pandas dataframe of training data.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X")," - Processed numpy array or pandas dataframe of training data.")))}d.isMDXComponent=!0}}]);