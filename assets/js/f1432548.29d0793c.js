"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2871],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return f}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return n?t.createElement(m,i(i({ref:r},u),{},{components:n})):t.createElement(m,i({ref:r},u))}));function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1334:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={sidebar_label:"variant_generator",title:"searcher.variant_generator"},s=void 0,l={unversionedId:"reference/searcher/variant_generator",id:"reference/searcher/variant_generator",isDocsHomePage:!1,title:"searcher.variant_generator",description:"TuneError Objects",source:"@site/docs/reference/searcher/variant_generator.md",sourceDirName:"reference/searcher",slug:"/reference/searcher/variant_generator",permalink:"/FLAML/docs/reference/searcher/variant_generator",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/searcher/variant_generator.md",tags:[],version:"current",frontMatter:{sidebar_label:"variant_generator",title:"searcher.variant_generator"},sidebar:"referenceSideBar",previous:{title:"suggestion",permalink:"/FLAML/docs/reference/searcher/suggestion"},next:{title:"analysis",permalink:"/FLAML/docs/reference/tune/analysis"}},u=[{value:"TuneError Objects",id:"tuneerror-objects",children:[{value:"generate_variants",id:"generate_variants",children:[],level:4},{value:"grid_search",id:"grid_search",children:[],level:4}],level:2}],p={toc:u};function d(e){var r=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"tuneerror-objects"},"TuneError Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TuneError(Exception)\n")),(0,o.kt)("p",null,"General error class raised by ray.tune."),(0,o.kt)("h4",{id:"generate_variants"},"generate","_","variants"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def generate_variants(unresolved_spec: Dict, constant_grid_search: bool = False, random_state: "RandomState" = None) -> Generator[Tuple[Dict, Dict], None, None]\n')),(0,o.kt)("p",null,'Generates variants from a spec (dict) with unresolved values.\nThere are two types of unresolved values:\nGrid search: These define a grid search over values. For example, the\nfollowing grid search values in a spec will produce six distinct\nvariants in combination:\n"activation": grid_search(','["relu", "tanh"]',')\n"learning_rate": grid_search(',"[1e-3, 1e-4, 1e-5]",")\nLambda functions: These are evaluated to produce a concrete value, and\ncan express dependencies or conditional distributions between values.\nThey can also be used to express random search (e.g., by calling\ninto the ",(0,o.kt)("inlineCode",{parentName:"p"},"random")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"np"),' module).\n"cpu": lambda spec: spec.config.num_workers\n"batch_size": lambda spec: random.uniform(1, 1000)\nFinally, to support defining specs in plain JSON / YAML, grid search\nand lambda functions can also be defined alternatively as follows:\n"activation": {"grid_search": ','["relu", "tanh"]','}\n"cpu": {"eval": "spec.config.num_workers"}\nUse ',(0,o.kt)("inlineCode",{parentName:"p"},"format_vars")," to format the returned dict of hyperparameters."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Yields"),":"),(0,o.kt)("p",null,"  (Dict of resolved variables, Spec object)"),(0,o.kt)("h4",{id:"grid_search"},"grid","_","search"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def grid_search(values: List) -> Dict[str, List]\n")),(0,o.kt)("p",null,"Convenience method for specifying grid search over a value."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"values")," - An iterable whose parameters will be gridded.")))}d.isMDXComponent=!0}}]);