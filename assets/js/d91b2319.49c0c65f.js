"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[476],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var f=n.createContext({}),u=function(e){var t=n.useContext(f),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(f.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,f=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(r),d=o,m=s["".concat(f,".").concat(d)]||s[d]||p[d]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=s;var l={};for(var f in t)hasOwnProperty.call(t,f)&&(l[f]=t[f]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},7013:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return f},metadata:function(){return u},toc:function(){return c},default:function(){return s}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={sidebar_label:"portfolio",title:"default.portfolio"},f=void 0,u={unversionedId:"reference/default/portfolio",id:"reference/default/portfolio",isDocsHomePage:!1,title:"default.portfolio",description:"config\\predictor\\tuple",source:"@site/docs/reference/default/portfolio.md",sourceDirName:"reference/default",slug:"/reference/default/portfolio",permalink:"/FLAML/docs/reference/default/portfolio",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/default/portfolio.md",tags:[],version:"current",frontMatter:{sidebar_label:"portfolio",title:"default.portfolio"},sidebar:"referenceSideBar",previous:{title:"greedy",permalink:"/FLAML/docs/reference/default/greedy"},next:{title:"suggest",permalink:"/FLAML/docs/reference/default/suggest"}},c=[{value:"config_predictor_tuple",id:"config_predictor_tuple",children:[],level:4},{value:"build_portfolio",id:"build_portfolio",children:[],level:4},{value:"load_json",id:"load_json",children:[],level:4},{value:"serialize",id:"serialize",children:[],level:4}],p={toc:c};function s(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"config_predictor_tuple"},"config","_","predictor","_","tuple"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def config_predictor_tuple(tasks, configs, meta_features, regret_matrix)\n")),(0,a.kt)("p",null,"Config predictor represented in tuple."),(0,a.kt)("p",null,"The returned tuple consists of (meta_features, preferences, proc)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"meta_features_norm")," - A dataframe of normalized meta features, each column for a task."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"preferences")," - A dataframe of sorted configuration indicies by their performance per task (column)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"regret_matrix")," - A dataframe of the configuration(row)-task(column) regret matrix.")),(0,a.kt)("h4",{id:"build_portfolio"},"build","_","portfolio"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def build_portfolio(meta_features, regret, strategy)\n")),(0,a.kt)("p",null,"Build a portfolio from meta features and regret matrix."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"meta_features")," - A dataframe of metafeatures matrix."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"regret")," - A dataframe of regret matrix."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"strategy"),' - A str of the strategy, one of ("greedy", "greedy-feedback").')),(0,a.kt)("h4",{id:"load_json"},"load","_","json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def load_json(filename)\n")),(0,a.kt)("p",null,"Returns the contents of json file filename."),(0,a.kt)("h4",{id:"serialize"},"serialize"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def serialize(configs, regret, meta_features, output_file, config_path)\n")),(0,a.kt)("p",null,"Store to disk all information FLAML-metalearn needs at runtime."),(0,a.kt)("p",null,"configs: names of model configs\nregret: regret matrix\nmeta_features: task metafeatures\noutput_file: filename\nconfig_path: path containing config json files"))}s.isMDXComponent=!0}}]);