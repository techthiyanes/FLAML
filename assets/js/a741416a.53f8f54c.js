"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6819],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},h={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,d=u["".concat(c,".").concat(m)]||u[m]||h[m]||i;return t?n.createElement(d,o(o({ref:r},p),{},{components:t})):n.createElement(d,o({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7640:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const i={sidebar_label:"online_searcher",title:"tune.searcher.online_searcher"},o=void 0,l={unversionedId:"reference/tune/searcher/online_searcher",id:"reference/tune/searcher/online_searcher",isDocsHomePage:!1,title:"tune.searcher.online_searcher",description:"BaseSearcher Objects",source:"@site/docs/reference/tune/searcher/online_searcher.md",sourceDirName:"reference/tune/searcher",slug:"/reference/tune/searcher/online_searcher",permalink:"/FLAML/docs/reference/tune/searcher/online_searcher",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/searcher/online_searcher.md",tags:[],version:"current",frontMatter:{sidebar_label:"online_searcher",title:"tune.searcher.online_searcher"},sidebar:"referenceSideBar",previous:{title:"flow2",permalink:"/FLAML/docs/reference/tune/searcher/flow2"},next:{title:"search_thread",permalink:"/FLAML/docs/reference/tune/searcher/search_thread"}},c=[{value:"BaseSearcher Objects",id:"basesearcher-objects",children:[],level:2},{value:"ChampionFrontierSearcher Objects",id:"championfrontiersearcher-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"set_search_properties",id:"set_search_properties",children:[],level:4},{value:"next_trial",id:"next_trial",children:[],level:4}],level:2}],s={toc:c};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"basesearcher-objects"},"BaseSearcher Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class BaseSearcher()\n")),(0,a.kt)("p",null,"Abstract class for an online searcher."),(0,a.kt)("h2",{id:"championfrontiersearcher-objects"},"ChampionFrontierSearcher Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class ChampionFrontierSearcher(BaseSearcher)\n")),(0,a.kt)("p",null,"The ChampionFrontierSearcher class."),(0,a.kt)("p",null,"NOTE about the correspondence about this code and the research paper:\n",(0,a.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2106.04815.pdf"},"ChaCha for Online AutoML"),".\nThis class serves the role of ConfigOralce as described in the paper."),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(init_config: Dict, space: Optional[Dict] = None, metric: Optional[str] = None, mode: Optional[str] = None, random_seed: Optional[int] = 2345, online_trial_args: Optional[Dict] = {}, nonpoly_searcher_name: Optional[str] = "CFO")\n')),(0,a.kt)("p",null,"Constructor."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"init_config")," - A dictionary of initial configuration."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"space")," - A dictionary to specify the search space."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metric")," - A string of the metric name to optimize for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mode")," - A string in ","['min', 'max']"," to specify the objective as\nminimization or maximization."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"random_seed")," - An integer of the random seed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"online_trial_args")," - A dictionary to specify the online trial\narguments for experimental purpose."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nonpoly_searcher_name")," - A string to specify the search algorithm\nfor nonpoly hyperparameters.")),(0,a.kt)("h4",{id:"set_search_properties"},"set","_","search","_","properties"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def set_search_properties(metric: Optional[str] = None, mode: Optional[str] = None, config: Optional[Dict] = {}, setting: Optional[Dict] = {}, init_call: Optional[bool] = False)\n")),(0,a.kt)("p",null,"Construct search space with the given config, and setup the search."),(0,a.kt)("h4",{id:"next_trial"},"next","_","trial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def next_trial()\n")),(0,a.kt)("p",null,"Return a trial from the _challenger_list."))}p.isMDXComponent=!0}}]);