"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7667],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),f=p(t),d=c,m=f["".concat(l,".").concat(d)]||f[d]||s[d]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function d(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var a=t.length,i=new Array(a);i[0]=f;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:c,i[1]=o;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6158:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return f}});var r=t(7462),c=t(3366),a=(t(7294),t(3905)),i=["components"],o={sidebar_label:"space",title:"tune.space"},l=void 0,p={unversionedId:"reference/tune/space",id:"reference/tune/space",isDocsHomePage:!1,title:"tune.space",description:"define\\by\\run\\_func",source:"@site/docs/reference/tune/space.md",sourceDirName:"reference/tune",slug:"/reference/tune/space",permalink:"/FLAML/docs/reference/tune/space",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/space.md",tags:[],version:"current",frontMatter:{sidebar_label:"space",title:"tune.space"},sidebar:"referenceSideBar",previous:{title:"sample",permalink:"/FLAML/docs/reference/tune/sample"},next:{title:"trial",permalink:"/FLAML/docs/reference/tune/trial"}},u=[{value:"define_by_run_func",id:"define_by_run_func",children:[],level:4},{value:"unflatten_hierarchical",id:"unflatten_hierarchical",children:[],level:4},{value:"add_cost_to_space",id:"add_cost_to_space",children:[],level:4},{value:"normalize",id:"normalize",children:[],level:4},{value:"indexof",id:"indexof",children:[],level:4},{value:"complete_config",id:"complete_config",children:[],level:4}],s={toc:u};function f(e){var n=e.components,t=(0,c.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"define_by_run_func"},"define","_","by","_","run","_","func"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def define_by_run_func(trial, space: Dict, path: str = "") -> Optional[Dict[str, Any]]\n')),(0,a.kt)("p",null,"Define-by-run function to create the search space."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A dict with constant values."),(0,a.kt)("h4",{id:"unflatten_hierarchical"},"unflatten","_","hierarchical"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def unflatten_hierarchical(config: Dict, space: Dict) -> Tuple[Dict, Dict]\n")),(0,a.kt)("p",null,"Unflatten hierarchical config."),(0,a.kt)("h4",{id:"add_cost_to_space"},"add","_","cost","_","to","_","space"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_cost_to_space(space: Dict, low_cost_point: Dict, choice_cost: Dict)\n")),(0,a.kt)("p",null,"Update the space in place by adding low_cost_point and choice_cost."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A dict with constant values."),(0,a.kt)("h4",{id:"normalize"},"normalize"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def normalize(config: Dict, space: Dict, reference_config: Dict, normalized_reference_config: Dict, recursive: bool = False)\n")),(0,a.kt)("p",null,"Normalize config in space according to reference_config."),(0,a.kt)("p",null,"Normalize each dimension in config to ","[0,1]","."),(0,a.kt)("h4",{id:"indexof"},"indexof"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def indexof(domain: Dict, config: Dict) -> int\n")),(0,a.kt)("p",null,"Find the index of config in domain.categories."),(0,a.kt)("h4",{id:"complete_config"},"complete","_","config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def complete_config(partial_config: Dict, space: Dict, flow2, disturb: bool = False, lower: Optional[Dict] = None, upper: Optional[Dict] = None) -> Tuple[Dict, Dict]\n")),(0,a.kt)("p",null,"Complete partial config in space."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  config, space."))}f.isMDXComponent=!0}}]);