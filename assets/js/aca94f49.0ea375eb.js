"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9128],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=l,_=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(_,i(i({ref:t},s),{},{components:n})):r.createElement(_,i({ref:t},s))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2647:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(7462),l=n(3366),a=(n(7294),n(3905)),i=["components"],o={sidebar_label:"trial_runner",title:"onlineml.trial_runner"},u=void 0,p={unversionedId:"reference/onlineml/trial_runner",id:"reference/onlineml/trial_runner",isDocsHomePage:!1,title:"onlineml.trial_runner",description:"OnlineTrialRunner Objects",source:"@site/docs/reference/onlineml/trial_runner.md",sourceDirName:"reference/onlineml",slug:"/reference/onlineml/trial_runner",permalink:"/FLAML/docs/reference/onlineml/trial_runner",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/onlineml/trial_runner.md",tags:[],version:"current",frontMatter:{sidebar_label:"trial_runner",title:"onlineml.trial_runner"},sidebar:"referenceSideBar",previous:{title:"trial",permalink:"/FLAML/docs/reference/onlineml/trial"},next:{title:"online_scheduler",permalink:"/FLAML/docs/reference/scheduler/online_scheduler"}},s=[{value:"OnlineTrialRunner Objects",id:"onlinetrialrunner-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"champion_trial",id:"champion_trial",children:[],level:4},{value:"running_trials",id:"running_trials",children:[],level:4},{value:"step",id:"step",children:[],level:4},{value:"get_top_running_trials",id:"get_top_running_trials",children:[],level:4},{value:"get_trials",id:"get_trials",children:[],level:4},{value:"add_trial",id:"add_trial",children:[],level:4},{value:"stop_trial",id:"stop_trial",children:[],level:4},{value:"pause_trial",id:"pause_trial",children:[],level:4},{value:"run_trial",id:"run_trial",children:[],level:4}],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"onlinetrialrunner-objects"},"OnlineTrialRunner Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class OnlineTrialRunner()\n")),(0,a.kt)("p",null,"Class for the OnlineTrialRunner."),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(max_live_model_num: int, searcher=None, scheduler=None, champion_test_policy="loss_ucb", **kwargs)\n')),(0,a.kt)("p",null,"Constructor."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max_live_model_num")," - The maximum number of 'live'/running models allowed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"searcher")," - A class for generating Trial objects progressively.\nThe ConfigOracle is implemented in the searcher."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scheduler")," - A class for managing the 'live' trials and allocating the\nresources for the trials."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"champion_test_policy")," - A string to specify what test policy to test for\nchampion. Currently can choose from ","['loss_ucb', 'loss_avg', 'loss_lcb', None]",".")),(0,a.kt)("h4",{id:"champion_trial"},"champion","_","trial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef champion_trial() -> Trial\n")),(0,a.kt)("p",null,"The champion trial."),(0,a.kt)("h4",{id:"running_trials"},"running","_","trials"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef running_trials()\n")),(0,a.kt)("p",null,"The running/'live' trials."),(0,a.kt)("h4",{id:"step"},"step"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def step(data_sample=None, prediction_trial_tuple=None)\n")),(0,a.kt)("p",null,"Schedule one trial to run each time it is called."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"data_sample")," - One data example."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prediction_trial_tuple")," - A list of information containing\n(prediction_made, prediction_trial).")),(0,a.kt)("h4",{id:"get_top_running_trials"},"get","_","top","_","running","_","trials"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def get_top_running_trials(top_ratio=None, top_metric="ucb") -> list\n')),(0,a.kt)("p",null,"Get a list of trial ids, whose performance is among the top running trials."),(0,a.kt)("h4",{id:"get_trials"},"get","_","trials"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_trials() -> list\n")),(0,a.kt)("p",null,"Return the list of trials managed by this TrialRunner."),(0,a.kt)("h4",{id:"add_trial"},"add","_","trial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_trial(new_trial)\n")),(0,a.kt)("p",null,"Add a new trial to this TrialRunner.\nTrials may be added at any time."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"new_trial")," ",(0,a.kt)("em",{parentName:"li"},"Trial")," - Trial to queue.")),(0,a.kt)("h4",{id:"stop_trial"},"stop","_","trial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def stop_trial(trial)\n")),(0,a.kt)("p",null,"Stop a trial: set the status of a trial to be\nTrial.TERMINATED and perform other subsequent operations."),(0,a.kt)("h4",{id:"pause_trial"},"pause","_","trial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def pause_trial(trial)\n")),(0,a.kt)("p",null,"Pause a trial: set the status of a trial to be Trial.PAUSED\nand perform other subsequent operations."),(0,a.kt)("h4",{id:"run_trial"},"run","_","trial"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def run_trial(trial)\n")),(0,a.kt)("p",null,"Run a trial: set the status of a trial to be Trial.RUNNING\nand perform other subsequent operations."))}d.isMDXComponent=!0}}]);