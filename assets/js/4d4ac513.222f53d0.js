"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3648],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return _}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),_=a,d=m["".concat(s,".").concat(_)]||m[_]||u[_]||l;return n?i.createElement(d,r(r({ref:t},p),{},{components:n})):i.createElement(d,r({ref:t},p))}));function _(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1548:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var i=n(7462),a=n(3366),l=(n(7294),n(3905)),r=["components"],o={sidebar_label:"trial",title:"onlineml.trial"},s=void 0,c={unversionedId:"reference/onlineml/trial",id:"reference/onlineml/trial",isDocsHomePage:!1,title:"onlineml.trial",description:"get\\ns\\feature\\dim\\from\\vw\\example",source:"@site/docs/reference/onlineml/trial.md",sourceDirName:"reference/onlineml",slug:"/reference/onlineml/trial",permalink:"/FLAML/docs/reference/onlineml/trial",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/onlineml/trial.md",tags:[],version:"current",frontMatter:{sidebar_label:"trial",title:"onlineml.trial"},sidebar:"referenceSideBar",previous:{title:"autovw",permalink:"/FLAML/docs/reference/onlineml/autovw"},next:{title:"trial_runner",permalink:"/FLAML/docs/reference/onlineml/trial_runner"}},p=[{value:"get_ns_feature_dim_from_vw_example",id:"get_ns_feature_dim_from_vw_example",children:[],level:4},{value:"OnlineResult Objects",id:"onlineresult-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"update_result",id:"update_result",children:[],level:4}],level:2},{value:"BaseOnlineTrial Objects",id:"baseonlinetrial-objects",children:[{value:"__init__",id:"__init__-1",children:[],level:4},{value:"set_resource_lease",id:"set_resource_lease",children:[],level:4},{value:"set_status",id:"set_status",children:[],level:4}],level:2},{value:"VowpalWabbitTrial Objects",id:"vowpalwabbittrial-objects",children:[{value:"__init__",id:"__init__-2",children:[],level:4},{value:"train_eval_model_online",id:"train_eval_model_online",children:[],level:4},{value:"predict",id:"predict",children:[],level:4}],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"get_ns_feature_dim_from_vw_example"},"get","_","ns","_","feature","_","dim","_","from","_","vw","_","example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_ns_feature_dim_from_vw_example(vw_example) -> dict\n")),(0,l.kt)("p",null,"Get a dictionary of feature dimensionality for each namespace singleton."),(0,l.kt)("h2",{id:"onlineresult-objects"},"OnlineResult Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class OnlineResult()\n")),(0,l.kt)("p",null,"Class for managing the result statistics of a trial."),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(result_type_name: str, cb_coef: Optional[float] = None, init_loss: Optional[float] = 0.0, init_cb: Optional[float] = 100.0, mode: Optional[str] = "min", sliding_window_size: Optional[int] = 100)\n')),(0,l.kt)("p",null,"Constructor."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"result_type_name")," - A String to specify the name of the result type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cb_coef")," - a string to specify the coefficient on the confidence bound."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"init_loss")," - a float to specify the inital loss."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"init_cb")," - a float to specify the intial confidence bound."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mode")," - A string in ","['min', 'max']"," to specify the objective as\nminimization or maximization."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sliding_window_size")," - An int to specify the size of the sliding windown\n(for experimental purpose).")),(0,l.kt)("h4",{id:"update_result"},"update","_","result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def update_result(new_loss, new_resource_used, data_dimension, bound_of_range=1.0, new_observation_count=1.0)\n")),(0,l.kt)("p",null,"Update result statistics."),(0,l.kt)("h2",{id:"baseonlinetrial-objects"},"BaseOnlineTrial Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class BaseOnlineTrial(Trial)\n")),(0,l.kt)("p",null,"Class for the online trial."),(0,l.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(config: dict, min_resource_lease: float, is_champion: Optional[bool] = False, is_checked_under_current_champion: Optional[bool] = True, custom_trial_name: Optional[str] = "mae", trial_id: Optional[str] = None)\n')),(0,l.kt)("p",null,"Constructor."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config")," - The configuration dictionary."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"min_resource_lease")," - A float specifying the minimum resource lease."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"is_champion")," - A bool variable indicating whether the trial is champion."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"is_checked_under_current_champion")," - A bool indicating whether the trial\nhas been used under the current champion."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"custom_trial_name")," - A string of a custom trial name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"trial_id")," - A string for the trial id.")),(0,l.kt)("h4",{id:"set_resource_lease"},"set","_","resource","_","lease"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def set_resource_lease(resource: float)\n")),(0,l.kt)("p",null,"Sets the resource lease accordingly."),(0,l.kt)("h4",{id:"set_status"},"set","_","status"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def set_status(status)\n")),(0,l.kt)("p",null,"Sets the status of the trial and record the start time."),(0,l.kt)("h2",{id:"vowpalwabbittrial-objects"},"VowpalWabbitTrial Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class VowpalWabbitTrial(BaseOnlineTrial)\n")),(0,l.kt)("p",null,"The class for Vowpal Wabbit online trials."),(0,l.kt)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(config: dict, min_resource_lease: float, metric: str = "mae", is_champion: Optional[bool] = False, is_checked_under_current_champion: Optional[bool] = True, custom_trial_name: Optional[str] = "vw_mae_clipped", trial_id: Optional[str] = None, cb_coef: Optional[float] = None)\n')),(0,l.kt)("p",null,"Constructor."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config")," ",(0,l.kt)("em",{parentName:"li"},"dict")," - the config of the trial (note that the config is a set\nbecause the hyperparameters are)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"min_resource_lease")," ",(0,l.kt)("em",{parentName:"li"},"float")," - the minimum resource lease."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"metric")," ",(0,l.kt)("em",{parentName:"li"},"str")," - the loss metric."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"is_champion")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - indicates whether the trial is the current champion or not."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"is_checked_under_current_champion")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - indicates whether this trials has\nbeen paused under the current champion."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"trial_id")," ",(0,l.kt)("em",{parentName:"li"},"str")," - id of the trial (if None, it will be generated in the constructor).")),(0,l.kt)("h4",{id:"train_eval_model_online"},"train","_","eval","_","model","_","online"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def train_eval_model_online(data_sample, y_pred)\n")),(0,l.kt)("p",null,"Train and evaluate model online."),(0,l.kt)("h4",{id:"predict"},"predict"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def predict(x)\n")),(0,l.kt)("p",null,"Predict using the model."))}m.isMDXComponent=!0}}]);