"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5648],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return r?n.createElement(k,o(o({ref:t},p),{},{components:r})):n.createElement(k,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1388:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_label:"utils",title:"tune.spark.utils"},o=void 0,i={unversionedId:"reference/tune/spark/utils",id:"reference/tune/spark/utils",isDocsHomePage:!1,title:"tune.spark.utils",description:"check\\_spark",source:"@site/docs/reference/tune/spark/utils.md",sourceDirName:"reference/tune/spark",slug:"/reference/tune/spark/utils",permalink:"/FLAML/docs/reference/tune/spark/utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/spark/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"tune.spark.utils"},sidebar:"referenceSideBar",previous:{title:"variant_generator",permalink:"/FLAML/docs/reference/tune/searcher/variant_generator"},next:{title:"analysis",permalink:"/FLAML/docs/reference/tune/analysis"}},s=[{value:"check_spark",id:"check_spark",children:[],level:4},{value:"get_n_cpus",id:"get_n_cpus",children:[],level:4},{value:"with_parameters",id:"with_parameters",children:[],level:4},{value:"broadcast_code",id:"broadcast_code",children:[],level:4},{value:"get_broadcast_data",id:"get_broadcast_data",children:[],level:4}],c={toc:s};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"check_spark"},"check","_","spark"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@lru_cache(maxsize=2)\ndef check_spark()\n")),(0,a.kt)("p",null,"Check if Spark is installed and running.\nResult of the function will be cached since test once is enough. As lru_cache will not\ncache exceptions, we don't raise exceptions here but only log a warning message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Return (True, None) if the check passes, otherwise log the exception message and\nreturn (False, Exception(msg)). The exception can be raised by the caller."),(0,a.kt)("h4",{id:"get_n_cpus"},"get","_","n","_","cpus"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def get_n_cpus(node="driver")\n')),(0,a.kt)("p",null,"Get the number of CPU cores of the given type of node."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node")," - string | The type of node to get the number of cores. Can be 'driver' or 'executor'.\nDefault is 'driver'.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  An int of the number of CPU cores."),(0,a.kt)("h4",{id:"with_parameters"},"with","_","parameters"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def with_parameters(trainable, **kwargs)\n")),(0,a.kt)("p",null,"Wrapper for trainables to pass arbitrary large data objects."),(0,a.kt)("p",null,"This wrapper function will store all passed parameters in the Spark\nBroadcast variable."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"trainable")," - Trainable to wrap."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**kwargs")," - parameters to store in object store.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A new function with partial application of the given arguments\nand keywords. The given arguments and keywords will be broadcasted\nto all the executors."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import pyspark\nimport flaml\nfrom sklearn.datasets import load_iris\ndef train(config, data=None):\n    if isinstance(data, pyspark.broadcast.Broadcast):\n        data = data.value\n    print(config, data)\n\ndata = load_iris()\nwith_parameters_train = flaml.tune.spark.utils.with_parameters(train, data=data)\nwith_parameters_train(config=1)\ntrain(config={"metric": "accuracy"})\n')),(0,a.kt)("h4",{id:"broadcast_code"},"broadcast","_","code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def broadcast_code(custom_code="", file_name="mylearner")\n')),(0,a.kt)("p",null,"Write customized learner/metric code contents to a file for importing.\nIt is necessary for using the customized learner/metric in spark backend.\nThe path of the learner/metric file will be returned."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"custom_code"),' - str, default="" | code contents of the custom learner/metric.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file_name"),' - str, default="mylearner" | file name of the custom learner/metric.')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  The path of the custom code file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flaml.tune.spark.utils import broadcast_code\nfrom flaml.automl.model import LGBMEstimator\n\ncustom_code = \'\'\'\nfrom flaml.automl.model import LGBMEstimator\nfrom flaml import tune\n\nclass MyLargeLGBM(LGBMEstimator):\n    @classmethod\n    def search_space(cls, **params):\n        return {\n            "n_estimators": {\n                "domain": tune.lograndint(lower=4, upper=32768),\n                "init_value": 32768,\n                "low_cost_init_value": 4,\n            },\n            "num_leaves": {\n                "domain": tune.lograndint(lower=4, upper=32768),\n                "init_value": 32768,\n                "low_cost_init_value": 4,\n            },\n        }\n\'\'\'\n\nbroadcast_code(custom_code=custom_code)\nfrom flaml.tune.spark.mylearner import MyLargeLGBM\nassert isinstance(MyLargeLGBM(), LGBMEstimator)\n')),(0,a.kt)("h4",{id:"get_broadcast_data"},"get","_","broadcast","_","data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_broadcast_data(broadcast_data)\n")),(0,a.kt)("p",null,"Get the broadcast data from the broadcast variable."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"broadcast_data")," - pyspark.broadcast.Broadcast | the broadcast variable.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  The broadcast data."))}p.isMDXComponent=!0}}]);