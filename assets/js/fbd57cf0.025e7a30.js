"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3763],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2505:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},p=void 0,c={unversionedId:"Examples/Integrate - Scikit-learn Pipeline",id:"Examples/Integrate - Scikit-learn Pipeline",isDocsHomePage:!1,title:"Integrate - Scikit-learn Pipeline",description:"As FLAML's AutoML module can be used a transformer in the Sklearn's pipeline we can get all the benefits of pipeline.",source:"@site/docs/Examples/Integrate - Scikit-learn Pipeline.md",sourceDirName:"Examples",slug:"/Examples/Integrate - Scikit-learn Pipeline",permalink:"/FLAML/docs/Examples/Integrate - Scikit-learn Pipeline",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/Examples/Integrate - Scikit-learn Pipeline.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Integrate - AzureML",permalink:"/FLAML/docs/Examples/Integrate - AzureML"},next:{title:"Tune - HuggingFace",permalink:"/FLAML/docs/Examples/Tune-HuggingFace"}},s=[{value:"Load data",id:"load-data",children:[],level:3},{value:"Create a pipeline",id:"create-a-pipeline",children:[],level:3},{value:"Run AutoML in the pipeline",id:"run-automl-in-the-pipeline",children:[],level:3},{value:"Get the automl object from the pipeline",id:"get-the-automl-object-from-the-pipeline",children:[],level:3}],u={toc:s};function m(e){var t=e.components,l=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As FLAML's AutoML module can be used a transformer in the Sklearn's pipeline we can get all the benefits of pipeline."),(0,i.kt)("h3",{id:"load-data"},"Load data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from flaml.data import load_openml_dataset\n\n# Download [Airlines dataset](https://www.openml.org/d/1169) from OpenML. The task is to predict whether a given flight will be delayed, given the information of the scheduled departure.\nX_train, X_test, y_train, y_test = load_openml_dataset(\n    dataset_id=1169, data_dir='./', random_state=1234, dataset_format='array')\n")),(0,i.kt)("h3",{id:"create-a-pipeline"},"Create a pipeline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn import set_config\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom flaml import AutoML\n\nset_config(display=\'diagram\')\n\nimputer = SimpleImputer()\nstandardizer = StandardScaler()\nautoml = AutoML()\n\nautoml_pipeline = Pipeline([\n    ("imputuer",imputer),\n    ("standardizer", standardizer),\n    ("automl", automl)\n])\nautoml_pipeline\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"png",src:n(3890).Z})),(0,i.kt)("h3",{id:"run-automl-in-the-pipeline"},"Run AutoML in the pipeline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"settings = {\n    \"time_budget\": 60,  # total running time in seconds\n    \"metric\": 'accuracy',  # primary metrics can be chosen from: ['accuracy','roc_auc', 'roc_auc_ovr', 'roc_auc_ovo', 'f1','log_loss','mae','mse','r2']\n    \"task\": 'classification',  # task type  \n    \"estimator_list\":['xgboost','catboost','lgbm'],\n    \"log_file_name\": 'airlines_experiment.log',  # flaml log file\n}\nautoml_pipeline.fit(X_train, y_train,\n                    automl__time_budget=60,\n                    automl__metric=\"accuracy\")\n")),(0,i.kt)("h3",{id:"get-the-automl-object-from-the-pipeline"},"Get the automl object from the pipeline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"automl = automl_pipeline.steps[2][1]\n# Get the best config and best learner\nprint('Best ML leaner:', automl.best_estimator)\nprint('Best hyperparmeter config:', automl.best_config)\nprint('Best accuracy on validation data: {0:.4g}'.format(1 - automl.best_loss))\nprint('Training duration of best run: {0:.4g} s'.format(automl.best_config_train_time))\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/FLAML/blob/main/notebook/integrate_sklearn.ipynb"},"Link to notebook")," | ",(0,i.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_sklearn.ipynb"},"Open in colab")))}m.isMDXComponent=!0},3890:function(e,t,n){t.Z=n.p+"assets/images/pipeline-7e27c1edb9e2dac4b1ee78f5ced90b1f.png"}}]);