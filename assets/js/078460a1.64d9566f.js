"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3306],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),u=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=u(t),c=l,f=s["".concat(p,".").concat(c)]||s[c]||d[c]||r;return t?a.createElement(f,i(i({ref:n},m),{},{components:t})):a.createElement(f,i({ref:n},m))}));function c(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=s;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},1208:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),l=(t(7294),t(3905));const r={sidebar_label:"sample",title:"tune.sample"},i=void 0,o={unversionedId:"reference/tune/sample",id:"reference/tune/sample",isDocsHomePage:!1,title:"tune.sample",description:"Domain Objects",source:"@site/docs/reference/tune/sample.md",sourceDirName:"reference/tune",slug:"/reference/tune/sample",permalink:"/FLAML/docs/reference/tune/sample",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/sample.md",tags:[],version:"current",frontMatter:{sidebar_label:"sample",title:"tune.sample"},sidebar:"referenceSideBar",previous:{title:"analysis",permalink:"/FLAML/docs/reference/tune/analysis"},next:{title:"space",permalink:"/FLAML/docs/reference/tune/space"}},p=[{value:"Domain Objects",id:"domain-objects",children:[{value:"cast",id:"cast",children:[],level:4},{value:"is_valid",id:"is_valid",children:[],level:4}],level:2},{value:"Grid Objects",id:"grid-objects",children:[{value:"uniform",id:"uniform",children:[],level:4},{value:"quniform",id:"quniform",children:[],level:4},{value:"loguniform",id:"loguniform",children:[],level:4},{value:"qloguniform",id:"qloguniform",children:[],level:4},{value:"choice",id:"choice",children:[],level:4},{value:"randint",id:"randint",children:[],level:4},{value:"lograndint",id:"lograndint",children:[],level:4},{value:"qrandint",id:"qrandint",children:[],level:4},{value:"qlograndint",id:"qlograndint",children:[],level:4},{value:"randn",id:"randn",children:[],level:4},{value:"qrandn",id:"qrandn",children:[],level:4}],level:2}],u={toc:p};function m(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"domain-objects"},"Domain Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Domain()\n")),(0,l.kt)("p",null,"Base class to specify a type and valid range to sample parameters from.\nThis base class is implemented by parameter spaces, like float ranges\n(",(0,l.kt)("inlineCode",{parentName:"p"},"Float"),"), integer ranges (",(0,l.kt)("inlineCode",{parentName:"p"},"Integer"),"), or categorical variables\n(",(0,l.kt)("inlineCode",{parentName:"p"},"Categorical"),"). The ",(0,l.kt)("inlineCode",{parentName:"p"},"Domain")," object contains information about\nvalid values (e.g. minimum and maximum values), and exposes methods that\nallow specification of specific samplers (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"uniform()")," or\n",(0,l.kt)("inlineCode",{parentName:"p"},"loguniform()"),")."),(0,l.kt)("h4",{id:"cast"},"cast"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def cast(value)\n")),(0,l.kt)("p",null,"Cast value to domain type"),(0,l.kt)("h4",{id:"is_valid"},"is","_","valid"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def is_valid(value: Any)\n")),(0,l.kt)("p",null,"Returns True if ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," is a valid value in this domain."),(0,l.kt)("h2",{id:"grid-objects"},"Grid Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Grid(Sampler)\n")),(0,l.kt)("p",null,"Dummy sampler used for grid search"),(0,l.kt)("h4",{id:"uniform"},"uniform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def uniform(lower: float, upper: float)\n")),(0,l.kt)("p",null,"Sample a float value uniformly between ",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upper"),".\nSampling from ",(0,l.kt)("inlineCode",{parentName:"p"},"tune.uniform(1, 10)")," is equivalent to sampling from\n",(0,l.kt)("inlineCode",{parentName:"p"},"np.random.uniform(1, 10))")),(0,l.kt)("h4",{id:"quniform"},"quniform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def quniform(lower: float, upper: float, q: float)\n")),(0,l.kt)("p",null,"Sample a quantized float value uniformly between ",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upper"),".\nSampling from ",(0,l.kt)("inlineCode",{parentName:"p"},"tune.uniform(1, 10)")," is equivalent to sampling from\n",(0,l.kt)("inlineCode",{parentName:"p"},"np.random.uniform(1, 10))"),"\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,l.kt)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,l.kt)("h4",{id:"loguniform"},"loguniform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def loguniform(lower: float, upper: float, base: float = 10)\n")),(0,l.kt)("p",null,"Sugar for sampling in different orders of magnitude."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lower")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Lower boundary of the output interval (e.g. 1e-4)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"upper")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Upper boundary of the output interval (e.g. 1e-2)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base")," ",(0,l.kt)("em",{parentName:"li"},"int")," - Base of the log. Defaults to 10.")),(0,l.kt)("h4",{id:"qloguniform"},"qloguniform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def qloguniform(lower: float, upper: float, q: float, base: float = 10)\n")),(0,l.kt)("p",null,"Sugar for sampling in different orders of magnitude.\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,l.kt)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lower")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Lower boundary of the output interval (e.g. 1e-4)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"upper")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Upper boundary of the output interval (e.g. 1e-2)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"q")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Quantization number. The result will be rounded to an\ninteger increment of this value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base")," ",(0,l.kt)("em",{parentName:"li"},"int")," - Base of the log. Defaults to 10.")),(0,l.kt)("h4",{id:"choice"},"choice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def choice(categories: Sequence)\n")),(0,l.kt)("p",null,"Sample a categorical value.\nSampling from ",(0,l.kt)("inlineCode",{parentName:"p"},"tune.choice([1, 2])")," is equivalent to sampling from\n",(0,l.kt)("inlineCode",{parentName:"p"},"np.random.choice([1, 2])")),(0,l.kt)("h4",{id:"randint"},"randint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def randint(lower: int, upper: int)\n")),(0,l.kt)("p",null,"Sample an integer value uniformly between ",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upper"),".\n",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,l.kt)("inlineCode",{parentName:"p"},"upper")," is exclusive.\nSampling from ",(0,l.kt)("inlineCode",{parentName:"p"},"tune.randint(10)")," is equivalent to sampling from\n",(0,l.kt)("inlineCode",{parentName:"p"},"np.random.randint(10)")),(0,l.kt)("h4",{id:"lograndint"},"lograndint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def lograndint(lower: int, upper: int, base: float = 10)\n")),(0,l.kt)("p",null,"Sample an integer value log-uniformly between ",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upper"),",\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"base")," being the base of logarithm.\n",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,l.kt)("inlineCode",{parentName:"p"},"upper")," is exclusive."),(0,l.kt)("h4",{id:"qrandint"},"qrandint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def qrandint(lower: int, upper: int, q: int = 1)\n")),(0,l.kt)("p",null,"Sample an integer value uniformly between ",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upper"),".\n",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,l.kt)("inlineCode",{parentName:"p"},"upper")," is also inclusive (!).\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,l.kt)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,l.kt)("h4",{id:"qlograndint"},"qlograndint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def qlograndint(lower: int, upper: int, q: int, base: float = 10)\n")),(0,l.kt)("p",null,"Sample an integer value log-uniformly between ",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upper"),",\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"base")," being the base of logarithm.\n",(0,l.kt)("inlineCode",{parentName:"p"},"lower")," is inclusive, ",(0,l.kt)("inlineCode",{parentName:"p"},"upper")," is also inclusive (!).\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,l.kt)("inlineCode",{parentName:"p"},"q"),".\nQuantization makes the upper bound inclusive."),(0,l.kt)("h4",{id:"randn"},"randn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def randn(mean: float = 0.0, sd: float = 1.0)\n")),(0,l.kt)("p",null,"Sample a float value normally with ",(0,l.kt)("inlineCode",{parentName:"p"},"mean")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"sd"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mean")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Mean of the normal distribution. Defaults to 0."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sd")," ",(0,l.kt)("em",{parentName:"li"},"float")," - SD of the normal distribution. Defaults to 1.")),(0,l.kt)("h4",{id:"qrandn"},"qrandn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def qrandn(mean: float, sd: float, q: float)\n")),(0,l.kt)("p",null,"Sample a float value normally with ",(0,l.kt)("inlineCode",{parentName:"p"},"mean")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"sd"),".\nThe value will be quantized, i.e. rounded to an integer increment of ",(0,l.kt)("inlineCode",{parentName:"p"},"q"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mean")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Mean of the normal distribution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sd")," ",(0,l.kt)("em",{parentName:"li"},"float")," - SD of the normal distribution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"q")," ",(0,l.kt)("em",{parentName:"li"},"float")," - Quantization number. The result will be rounded to an\ninteger increment of this value.")))}m.isMDXComponent=!0}}]);