"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2911],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),i=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=i(e.components);return n.createElement(s.Provider,{value:r},e.children)},h={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,f=p["".concat(s,".").concat(d)]||p[d]||h[d]||c;return t?n.createElement(f,o(o({ref:r},u),{},{components:t})):n.createElement(f,o({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<c;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2213:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return i},toc:function(){return u},default:function(){return p}});var n=t(7462),a=t(3366),c=(t(7294),t(3905)),o=["components"],l={sidebar_label:"search_thread",title:"searcher.search_thread"},s=void 0,i={unversionedId:"reference/searcher/search_thread",id:"reference/searcher/search_thread",isDocsHomePage:!1,title:"searcher.search_thread",description:"SearchThread Objects",source:"@site/docs/reference/searcher/search_thread.md",sourceDirName:"reference/searcher",slug:"/reference/searcher/search_thread",permalink:"/FLAML/docs/reference/searcher/search_thread",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/searcher/search_thread.md",tags:[],version:"current",frontMatter:{sidebar_label:"search_thread",title:"searcher.search_thread"},sidebar:"referenceSideBar",previous:{title:"online_searcher",permalink:"/FLAML/docs/reference/searcher/online_searcher"},next:{title:"suggestion",permalink:"/FLAML/docs/reference/searcher/suggestion"}},u=[{value:"SearchThread Objects",id:"searchthread-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"suggest",id:"suggest",children:[],level:4},{value:"on_trial_complete",id:"on_trial_complete",children:[],level:4},{value:"reach",id:"reach",children:[],level:4},{value:"can_suggest",id:"can_suggest",children:[],level:4}],level:2}],h={toc:u};function p(e){var r=e.components,t=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,n.Z)({},h,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"searchthread-objects"},"SearchThread Objects"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"class SearchThread()\n")),(0,c.kt)("p",null,"Class of global or local search thread."),(0,c.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(mode: str = "min", search_alg: Optional[Searcher] = None, cost_attr: Optional[str] = "time_total_s")\n')),(0,c.kt)("p",null,"When search_alg is omitted, use local search FLOW2."),(0,c.kt)("h4",{id:"suggest"},"suggest"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def suggest(trial_id: str) -> Optional[Dict]\n")),(0,c.kt)("p",null,"Use the suggest() of the underlying search algorithm."),(0,c.kt)("h4",{id:"on_trial_complete"},"on","_","trial","_","complete"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def on_trial_complete(trial_id: str, result: Optional[Dict] = None, error: bool = False)\n")),(0,c.kt)("p",null,"Update the statistics of the thread."),(0,c.kt)("h4",{id:"reach"},"reach"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def reach(thread) -> bool\n")),(0,c.kt)("p",null,"Whether the incumbent can reach the incumbent of thread."),(0,c.kt)("h4",{id:"can_suggest"},"can","_","suggest"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef can_suggest() -> bool\n")),(0,c.kt)("p",null,"Whether the thread can suggest new configs."))}p.isMDXComponent=!0}}]);