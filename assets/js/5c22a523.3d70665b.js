"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,f=c["".concat(o,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(f,l(l({ref:t},m),{},{components:n})):a.createElement(f,l({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2357:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"analysis",title:"tune.analysis"},l=void 0,s={unversionedId:"reference/tune/analysis",id:"reference/tune/analysis",isDocsHomePage:!1,title:"tune.analysis",description:"ExperimentAnalysis Objects",source:"@site/docs/reference/tune/analysis.md",sourceDirName:"reference/tune",slug:"/reference/tune/analysis",permalink:"/FLAML/docs/reference/tune/analysis",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/analysis.md",tags:[],version:"current",frontMatter:{sidebar_label:"analysis",title:"tune.analysis"},sidebar:"referenceSideBar",previous:{title:"variant_generator",permalink:"/FLAML/docs/reference/searcher/variant_generator"},next:{title:"sample",permalink:"/FLAML/docs/reference/tune/sample"}},o=[{value:"ExperimentAnalysis Objects",id:"experimentanalysis-objects",children:[{value:"best_trial",id:"best_trial",children:[],level:4},{value:"best_config",id:"best_config",children:[],level:4},{value:"results",id:"results",children:[],level:4},{value:"get_best_trial",id:"get_best_trial",children:[],level:4},{value:"get_best_config",id:"get_best_config",children:[],level:4},{value:"best_result",id:"best_result",children:[],level:4}],level:2}],p={toc:o};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"experimentanalysis-objects"},"ExperimentAnalysis Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class ExperimentAnalysis()\n")),(0,r.kt)("p",null,"Analyze results from a Tune experiment."),(0,r.kt)("h4",{id:"best_trial"},"best","_","trial"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef best_trial() -> Trial\n")),(0,r.kt)("p",null,"Get the best trial of the experiment\nThe best trial is determined by comparing the last trial results\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," parameters passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"tune.run()"),".\nIf you didn't pass these parameters, use\n",(0,r.kt)("inlineCode",{parentName:"p"},"get_best_trial(metric, mode, scope)")," instead."),(0,r.kt)("h4",{id:"best_config"},"best","_","config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef best_config() -> Dict\n")),(0,r.kt)("p",null,"Get the config of the best trial of the experiment\nThe best trial is determined by comparing the last trial results\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," parameters passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"tune.run()"),".\nIf you didn't pass these parameters, use\n",(0,r.kt)("inlineCode",{parentName:"p"},"get_best_config(metric, mode, scope)")," instead."),(0,r.kt)("h4",{id:"results"},"results"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef results() -> Dict[str, Dict]\n")),(0,r.kt)("p",null,"Get the last result of all the trials of the experiment"),(0,r.kt)("h4",{id:"get_best_trial"},"get","_","best","_","trial"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def get_best_trial(metric: Optional[str] = None, mode: Optional[str] = None, scope: str = "last", filter_nan_and_inf: bool = True) -> Optional[Trial]\n')),(0,r.kt)("p",null,"Retrieve the best trial object.\nCompares all trials' scores on ",(0,r.kt)("inlineCode",{parentName:"p"},"metric"),".\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," is not specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"self.default_metric")," will be used.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," is not specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"self.default_mode")," will be used.\nThese values are usually initialized by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," parameters to ",(0,r.kt)("inlineCode",{parentName:"p"},"tune.run()"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metric")," ",(0,r.kt)("em",{parentName:"li"},"str")," - Key for trial info to order on. Defaults to\n",(0,r.kt)("inlineCode",{parentName:"li"},"self.default_metric"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mode")," ",(0,r.kt)("em",{parentName:"li"},"str")," - One of ","[min, max]",". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"self.default_mode"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scope")," ",(0,r.kt)("em",{parentName:"li"},"str")," - One of ","[all, last, avg, last-5-avg, last-10-avg]",".\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=last"),", only look at each trial's final step for\n",(0,r.kt)("inlineCode",{parentName:"li"},"metric"),", and compare across trials based on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),".\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=avg"),", consider the simple average over all steps\nfor ",(0,r.kt)("inlineCode",{parentName:"li"},"metric")," and compare across trials based on\n",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),". If ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=last-5-avg")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=last-10-avg"),",\nconsider the simple average over the last 5 or 10 steps for\n",(0,r.kt)("inlineCode",{parentName:"li"},"metric")," and compare across trials based on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),".\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=all"),", find each trial's min/max score for ",(0,r.kt)("inlineCode",{parentName:"li"},"metric"),"\nbased on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode"),", and compare trials based on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filter_nan_and_inf")," ",(0,r.kt)("em",{parentName:"li"},"bool")," - If True (default), NaN or infinite\nvalues are disregarded and these trials are never selected as\nthe best trial.")),(0,r.kt)("h4",{id:"get_best_config"},"get","_","best","_","config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def get_best_config(metric: Optional[str] = None, mode: Optional[str] = None, scope: str = "last") -> Optional[Dict]\n')),(0,r.kt)("p",null,"Retrieve the best config corresponding to the trial.\nCompares all trials' scores on ",(0,r.kt)("inlineCode",{parentName:"p"},"metric"),".\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," is not specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"self.default_metric")," will be used.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," is not specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"self.default_mode")," will be used.\nThese values are usually initialized by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," parameters to ",(0,r.kt)("inlineCode",{parentName:"p"},"tune.run()"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metric")," ",(0,r.kt)("em",{parentName:"li"},"str")," - Key for trial info to order on. Defaults to\n",(0,r.kt)("inlineCode",{parentName:"li"},"self.default_metric"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mode")," ",(0,r.kt)("em",{parentName:"li"},"str")," - One of ","[min, max]",". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"self.default_mode"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scope")," ",(0,r.kt)("em",{parentName:"li"},"str")," - One of ","[all, last, avg, last-5-avg, last-10-avg]",".\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=last"),", only look at each trial's final step for\n",(0,r.kt)("inlineCode",{parentName:"li"},"metric"),", and compare across trials based on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),".\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=avg"),", consider the simple average over all steps\nfor ",(0,r.kt)("inlineCode",{parentName:"li"},"metric")," and compare across trials based on\n",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),". If ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=last-5-avg")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=last-10-avg"),",\nconsider the simple average over the last 5 or 10 steps for\n",(0,r.kt)("inlineCode",{parentName:"li"},"metric")," and compare across trials based on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),".\nIf ",(0,r.kt)("inlineCode",{parentName:"li"},"scope=all"),", find each trial's min/max score for ",(0,r.kt)("inlineCode",{parentName:"li"},"metric"),"\nbased on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode"),", and compare trials based on ",(0,r.kt)("inlineCode",{parentName:"li"},"mode=[min,max]"),".")),(0,r.kt)("h4",{id:"best_result"},"best","_","result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef best_result() -> Dict\n")),(0,r.kt)("p",null,"Get the last result of the best trial of the experiment\nThe best trial is determined by comparing the last trial results\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," parameters passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"tune.run()"),".\nIf you didn't pass these parameters, use\n",(0,r.kt)("inlineCode",{parentName:"p"},"get_best_trial(metric, mode, scope).last_result")," instead."))}m.isMDXComponent=!0}}]);