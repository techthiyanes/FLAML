"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6639],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6450:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"code_utils",title:"autogen.code_utils"},l=void 0,o={unversionedId:"reference/autogen/code_utils",id:"reference/autogen/code_utils",isDocsHomePage:!1,title:"autogen.code_utils",description:"infer\\_lang",source:"@site/docs/reference/autogen/code_utils.md",sourceDirName:"reference/autogen",slug:"/reference/autogen/code_utils",permalink:"/FLAML/docs/reference/autogen/code_utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/code_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"code_utils",title:"autogen.code_utils"},sidebar:"referenceSideBar",previous:{title:"openai_utils",permalink:"/FLAML/docs/reference/autogen/oai/openai_utils"},next:{title:"math_utils",permalink:"/FLAML/docs/reference/autogen/math_utils"}},s=[{value:"infer_lang",id:"infer_lang",children:[],level:4},{value:"extract_code",id:"extract_code",children:[],level:4},{value:"generate_code",id:"generate_code",children:[],level:4},{value:"improve_function",id:"improve_function",children:[],level:4},{value:"improve_code",id:"improve_code",children:[],level:4},{value:"execute_code",id:"execute_code",children:[],level:4},{value:"generate_assertions",id:"generate_assertions",children:[],level:4},{value:"eval_function_completions",id:"eval_function_completions",children:[],level:4},{value:"PassAssertionFilter Objects",id:"passassertionfilter-objects",children:[{value:"pass_assertions",id:"pass_assertions",children:[],level:4},{value:"implement",id:"implement",children:[],level:4}],level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"infer_lang"},"infer","_","lang"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def infer_lang(code)\n")),(0,i.kt)("p",null,"infer the language for the code.\nTODO: make it robust."),(0,i.kt)("h4",{id:"extract_code"},"extract","_","code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def extract_code(text: str, pattern: str = CODE_BLOCK_PATTERN) -> List[Tuple[str, str]]\n")),(0,i.kt)("p",null,"Extract code from a text."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"text")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The text to extract code from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pattern")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The regular expression pattern for finding the code block.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list")," - A list of tuples, each containing the language and the code.")),(0,i.kt)("h4",{id:"generate_code"},"generate","_","code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def generate_code(pattern: str = CODE_BLOCK_PATTERN, **config) -> Tuple[str, float]\n")),(0,i.kt)("p",null,"Generate code."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pattern")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The regular expression pattern for finding the code block.\nThe default pattern is for finding a code block in a markdown file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config")," ",(0,i.kt)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," - The generated code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,i.kt)("h4",{id:"improve_function"},"improve","_","function"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def improve_function(file_name, func_name, objective, **config)\n")),(0,i.kt)("p",null,"(work in progress) Improve the function to achieve the objective."),(0,i.kt)("h4",{id:"improve_code"},"improve","_","code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def improve_code(files, objective, suggest_only=True, **config)\n")),(0,i.kt)("p",null,"Improve the code to achieve a given objective."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"files")," ",(0,i.kt)("em",{parentName:"li"},"list")," - A list of file names containing the source code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"objective")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The objective to achieve."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"suggest_only")," ",(0,i.kt)("em",{parentName:"li"},"bool")," - Whether to return only the suggestions or the improved code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config")," ",(0,i.kt)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," - The improved code if suggest_only=False; a list of suggestions if suggest_only=True (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,i.kt)("h4",{id:"execute_code"},"execute","_","code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def execute_code(code: Optional[str] = None, timeout: Optional[int] = None, filename: Optional[str] = None, work_dir: Optional[str] = None, use_docker: Optional[Union[List[str], str, bool]] = True, lang: Optional[str] = "python") -> Tuple[int, bytes, str]\n')),(0,i.kt)("p",null,"Execute code in a docker container.\nThis function is not tested on MacOS."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"code")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The code to execute.\nIf None, the code from the file specified by filename will be executed.\nEither code or filename must be provided."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," ",(0,i.kt)("em",{parentName:"li"},"Optional, int")," - The maximum execution time in seconds."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The file name to save the code or where the code is stored when ",(0,i.kt)("inlineCode",{parentName:"li"},"code")," is None.\nIf None, a file with a randomly generated name will be created.\nThe randomly generated file will be deleted after execution.\nThe file name must be a relative path. Relative paths are relative to the working directory."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"work_dir")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str"),' - The working directory for the code execution.\nIf None, a default working directory will be used.\nThe default working directory is the "extensions" directory under\n"path_to_flaml/autogen".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use_docker")," ",(0,i.kt)("em",{parentName:"li"},"Optional, list, str or bool")," - The docker image to use for code execution.\nIf a list or a str of image name(s) is provided, the code will be executed in a docker container\nwith the first image successfully pulled.\nIf None, False or empty, the code will be executed in the current environment.\nDefault is True, which will be converted into a list.\nIf the code is executed in the current environment,\nthe code must be trusted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lang")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str"),' - The language of the code. Default is "python".')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," - 0 if the code executes successfully."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," - The error message if the code fails to execute; the stdout otherwise."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"image")," - The docker image name after container run when docker is used.")),(0,i.kt)("h4",{id:"generate_assertions"},"generate","_","assertions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def generate_assertions(definition: str, **config) -> Tuple[str, float]\n")),(0,i.kt)("p",null,"Generate assertions for a function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The function definition, including the signature and docstr."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config")," ",(0,i.kt)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," - The generated assertions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,i.kt)("h4",{id:"eval_function_completions"},"eval","_","function","_","completions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def eval_function_completions(responses: List[str], definition: str, test: Optional[str] = None, entry_point: Optional[str] = None, assertions: Optional[Union[str, Callable[[str], Tuple[str, float]]]] = None, timeout: Optional[float] = 3, use_docker: Optional[bool] = True) -> Dict\n")),(0,i.kt)("p",null,"Select a response from a list of responses for the function completion task (using generated assertions), and/or evaluate if the task is successful using a gold test."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"responses")," ",(0,i.kt)("em",{parentName:"li"},"list")," - The list of responses."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The input definition."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The test code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entry_point")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The name of the function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assertions")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str or Callable")," - The assertion code which serves as a filter of the responses, or an assertion generator.\nWhen provided, only the responses that pass the assertions will be considered for the actual test (if provided)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," ",(0,i.kt)("em",{parentName:"li"},"Optional, float")," - The timeout for executing the code.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dict")," - The success metrics.")),(0,i.kt)("h2",{id:"passassertionfilter-objects"},"PassAssertionFilter Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class PassAssertionFilter()\n")),(0,i.kt)("h4",{id:"pass_assertions"},"pass","_","assertions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def pass_assertions(context, response, **_)\n")),(0,i.kt)("p",null,"Check if the response passes the assertions."),(0,i.kt)("h4",{id:"implement"},"implement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def implement(definition: str, configs: Optional[List[Dict]] = None, assertions: Optional[Union[str, Callable[[str], Tuple[str, float]]]] = generate_assertions) -> Tuple[str, float]\n")),(0,i.kt)("p",null,"Implement a function from a definition."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The function definition, including the signature and docstr."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"configs")," ",(0,i.kt)("em",{parentName:"li"},"list")," - The list of configurations for completion."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assertions")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str or Callable")," - The assertion code which serves as a filter of the responses, or an assertion generator.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," - The implementation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - The cost of the implementation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," - The index of the configuration which generates the implementation.")))}u.isMDXComponent=!0}}]);