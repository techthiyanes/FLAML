"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,_=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(_,i(i({ref:t},m),{},{components:n})):a.createElement(_,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},136:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"math_user_proxy_agent",title:"autogen.agent.math_user_proxy_agent"},i=void 0,l={unversionedId:"reference/autogen/agent/math_user_proxy_agent",id:"reference/autogen/agent/math_user_proxy_agent",isDocsHomePage:!1,title:"autogen.agent.math_user_proxy_agent",description:"is\\termination\\msg",source:"@site/docs/reference/autogen/agent/math_user_proxy_agent.md",sourceDirName:"reference/autogen/agent",slug:"/reference/autogen/agent/math_user_proxy_agent",permalink:"/FLAML/docs/reference/autogen/agent/math_user_proxy_agent",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/agent/math_user_proxy_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"math_user_proxy_agent",title:"autogen.agent.math_user_proxy_agent"},sidebar:"referenceSideBar",previous:{title:"assistant_agent",permalink:"/FLAML/docs/reference/autogen/agent/assistant_agent"},next:{title:"user_proxy_agent",permalink:"/FLAML/docs/reference/autogen/agent/user_proxy_agent"}},p=[{value:"is_termination_msg",id:"is_termination_msg",children:[],level:4},{value:"add_print_to_last_line",id:"add_print_to_last_line",children:[],level:4},{value:"remove_print",id:"remove_print",children:[],level:4},{value:"MathUserProxyAgent Objects",id:"mathuserproxyagent-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"generate_init_prompt",id:"generate_init_prompt",children:[],level:4},{value:"auto_reply",id:"auto_reply",children:[],level:4},{value:"get_from_dict_or_env",id:"get_from_dict_or_env",children:[],level:4}],level:2},{value:"WolframAlphaAPIWrapper Objects",id:"wolframalphaapiwrapper-objects",children:[],level:2},{value:"Config Objects",id:"config-objects",children:[{value:"validate_environment",id:"validate_environment",children:[],level:4},{value:"run",id:"run",children:[],level:4}],level:2}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"is_termination_msg"},"is","_","termination","_","msg"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def is_termination_msg(x)\n")),(0,r.kt)("p",null,"Check if a message is a termination message."),(0,r.kt)("h4",{id:"add_print_to_last_line"},"add","_","print","_","to","_","last","_","line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add_print_to_last_line(s)\n")),(0,r.kt)("p",null,"Add print() to the last line of a string."),(0,r.kt)("h4",{id:"remove_print"},"remove","_","print"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove_print(s)\n")),(0,r.kt)("p",null,"remove all print statements from a string."),(0,r.kt)("h2",{id:"mathuserproxyagent-objects"},"MathUserProxyAgent Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MathUserProxyAgent(UserProxyAgent)\n")),(0,r.kt)("p",null,"(Experimental) A MathChat agent that can handle math problems."),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(name="MathChatAgent", system_message="", work_dir=None, function_map=defaultdict(callable), human_input_mode="NEVER", max_consecutive_auto_reply=None, is_termination_msg=is_termination_msg, use_docker=True, max_invalid_q_per_step=3, **config, ,)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," ",(0,r.kt)("em",{parentName:"li"},"str")," - name of the agent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system_message")," ",(0,r.kt)("em",{parentName:"li"},"str")," - system message to be sent to the agent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"work_dir")," ",(0,r.kt)("em",{parentName:"li"},"str")," - working directory for the agent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"human_input_mode")," ",(0,r.kt)("em",{parentName:"li"},"str"),' - whether to ask for human inputs every time a message is received.\nPossible values are "ALWAYS", "TERMINATE", "NEVER".\n(1) When "ALWAYS", the agent prompts for human input every time a message is received.\nUnder this mode, the conversation stops when the human input is "exit",\nor when is_termination_msg is True and there is no human input.\n(2) When "TERMINATE", the agent only prompts for human input only when a termination message is received or\nthe number of auto reply reaches the max_consecutive_auto_reply.\n(3) When "NEVER", the agent will never prompt for human input. Under this mode, the conversation stops\nwhen the number of auto reply reaches the max_consecutive_auto_reply or when is_termination_msg is True.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function_map")," ",(0,r.kt)("em",{parentName:"li"},"dict","[str, callable]")," - Mapping function names (passed to openai) to callable functions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_consecutive_auto_reply")," ",(0,r.kt)("em",{parentName:"li"},"int"),' - the maximum number of consecutive auto replies.\ndefault to None (no limit provided, class attribute MAX_CONSECUTIVE_AUTO_REPLY will be used as the limit in this case).\nThe limit only plays a role when human_input_mode is not "ALWAYS".'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is_termination_msg")," ",(0,r.kt)("em",{parentName:"li"},"function"),' - a function that takes a message in the form of a dictionary and returns a boolean value indicating if this received message is a termination message.\nThe dict can contain the following keys: "content", "role", "name", "function_call".'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"use_docker")," ",(0,r.kt)("em",{parentName:"li"},"bool")," - whether to use docker to execute the code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_invalid_q_per_step")," ",(0,r.kt)("em",{parentName:"li"},"int")," - (ADDED) the maximum number of invalid queries per step."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**config")," ",(0,r.kt)("em",{parentName:"li"},"dict")," - other configurations.")),(0,r.kt)("h4",{id:"generate_init_prompt"},"generate","_","init","_","prompt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def generate_init_prompt(problem, prompt_type="default", customized_prompt=None)\n')),(0,r.kt)("p",null,"Generate a prompt for the assitant agent with the given problem and prompt."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"problem")," ",(0,r.kt)("em",{parentName:"li"},"str")," - the problem to be solved."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prompt_type")," ",(0,r.kt)("em",{parentName:"li"},"str"),' - the type of the prompt. Possible values are "default", "python", "wolfram".\n(1) "default": the prompt that allows the agent to choose between 3 ways to solve a problem:',(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"write a python program to solve it directly."),(0,r.kt)("li",{parentName:"ol"},"solve it directly without python."),(0,r.kt)("li",{parentName:"ol"},'solve it step by step with python.\n(2) "python":\na simplified prompt from the third way of the "default" prompt, that asks the assistant\nto solve the problem step by step with python.\n(3) "two_tools":\na simplified prompt similar to the "python" prompt, but allows the model to choose between\nPython and Wolfram Alpha to solve the problem.'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"customized_prompt")," ",(0,r.kt)("em",{parentName:"li"},"str")," - a customized prompt to be used. If it is not None, the prompt_type will be ignored.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str")," - the generated prompt ready to be sent to the assistant agent.")),(0,r.kt)("h4",{id:"auto_reply"},"auto","_","reply"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def auto_reply(message, sender, default_reply="")\n')),(0,r.kt)("p",null,"Generate an auto reply."),(0,r.kt)("h4",{id:"get_from_dict_or_env"},"get","_","from","_","dict","_","or","_","env"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_from_dict_or_env(data: Dict[str, Any], key: str, env_key: str, default: Optional[str] = None) -> str\n")),(0,r.kt)("p",null,"Get a value from a dictionary or an environment variable."),(0,r.kt)("h2",{id:"wolframalphaapiwrapper-objects"},"WolframAlphaAPIWrapper Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class WolframAlphaAPIWrapper(BaseModel)\n")),(0,r.kt)("p",null,"Wrapper for Wolfram Alpha."),(0,r.kt)("p",null,"Docs for using:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to wolfram alpha and sign up for a developer account"),(0,r.kt)("li",{parentName:"ol"},"Create an app and get your APP ID"),(0,r.kt)("li",{parentName:"ol"},"Save your APP ID into WOLFRAM_ALPHA_APPID env variable"),(0,r.kt)("li",{parentName:"ol"},"pip install wolframalpha")),(0,r.kt)("h2",{id:"config-objects"},"Config Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Config()\n")),(0,r.kt)("p",null,"Configuration for this pydantic object."),(0,r.kt)("h4",{id:"validate_environment"},"validate","_","environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@root_validator(skip_on_failure=True)\ndef validate_environment(cls, values: Dict) -> Dict\n")),(0,r.kt)("p",null,"Validate that api key and python package exists in environment."),(0,r.kt)("h4",{id:"run"},"run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def run(query: str) -> str\n")),(0,r.kt)("p",null,"Run query through WolframAlpha and parse result."))}m.isMDXComponent=!0}}]);