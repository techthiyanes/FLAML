"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3409],{3905:(t,e,r)=>{r.d(e,{Zo:()=>b,kt:()=>c});var a=r(7294);function l(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function n(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){l(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,a,l=function(t,e){if(null==t)return{};var r,a,l={},o=Object.keys(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||(l[r]=t[r]);return l}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(l[r]=t[r])}return l}var m=a.createContext({}),i=function(t){var e=a.useContext(m),r=e;return t&&(r="function"==typeof t?t(e):n(n({},e),t)),r},b=function(t){var e=i(t.components);return a.createElement(m.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var r=t.components,l=t.mdxType,o=t.originalType,m=t.parentName,b=s(t,["components","mdxType","originalType","parentName"]),g=i(r),c=l,f=g["".concat(m,".").concat(c)]||g[c]||u[c]||o;return r?a.createElement(f,n(n({ref:e},b),{},{components:r})):a.createElement(f,n({ref:e},b))}));function c(t,e){var r=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var o=r.length,n=new Array(o);n[0]=g;var s={};for(var m in e)hasOwnProperty.call(e,m)&&(s[m]=e[m]);s.originalType=t,s.mdxType="string"==typeof t?t:l,n[1]=s;for(var i=2;i<o;i++)n[i]=r[i];return a.createElement.apply(null,n)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},3653:(t,e,r)=>{r.r(e),r.d(e,{contentTitle:()=>n,default:()=>b,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=r(7462),l=(r(7294),r(3905));const o={},n="AutoML - Rank",s={unversionedId:"Examples/AutoML-Rank",id:"Examples/AutoML-Rank",isDocsHomePage:!1,title:"AutoML - Rank",description:"A simple learning-to-rank example",source:"@site/docs/Examples/AutoML-Rank.md",sourceDirName:"Examples",slug:"/Examples/AutoML-Rank",permalink:"/FLAML/docs/Examples/AutoML-Rank",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/Examples/AutoML-Rank.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"AutoML - NLP",permalink:"/FLAML/docs/Examples/AutoML-NLP"},next:{title:"AutoML - Regression",permalink:"/FLAML/docs/Examples/AutoML-Regression"}},m=[{value:"A simple learning-to-rank example",id:"a-simple-learning-to-rank-example",children:[{value:"Sample output",id:"sample-output",children:[],level:4}],level:3}],i={toc:m};function b(t){let{components:e,...r}=t;return(0,l.kt)("wrapper",(0,a.Z)({},i,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"automl---rank"},"AutoML - Rank"),(0,l.kt)("h3",{id:"a-simple-learning-to-rank-example"},"A simple learning-to-rank example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.datasets import fetch_openml\nfrom flaml import AutoML\n\nX_train, y_train = fetch_openml(name=\"credit-g\", return_X_y=True, as_frame=False)\ny_train = y_train.cat.codes\n# not a real learning to rank dataaset\ngroups = [200] * 4 + [100] * 2    # group counts\nautoml = AutoML()\nautoml.fit(\n    X_train, y_train, groups=groups,\n    task='rank', time_budget=10,    # in seconds\n)\n")),(0,l.kt)("h4",{id:"sample-output"},"Sample output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[flaml.automl: 11-15 07:14:30] {1485} INFO - Data split method: group\n[flaml.automl: 11-15 07:14:30] {1489} INFO - Evaluation method: holdout\n[flaml.automl: 11-15 07:14:30] {1540} INFO - Minimizing error metric: 1-ndcg\n[flaml.automl: 11-15 07:14:30] {1577} INFO - List of ML learners in AutoML Run: ['lgbm', 'xgboost']\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 0, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {1944} INFO - Estimated sufficient time budget=679s. Estimated necessary time budget=1s.\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.1s,  estimator lgbm's best error=0.0248,     best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 1, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.1s,  estimator lgbm's best error=0.0248,     best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 2, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.2s,  estimator lgbm's best error=0.0248,     best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 3, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.2s,  estimator lgbm's best error=0.0248,     best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 4, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.2s,  estimator xgboost's best error=0.0315,  best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 5, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.2s,  estimator xgboost's best error=0.0315,  best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 6, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.3s,  estimator lgbm's best error=0.0248,     best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 7, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.3s,  estimator lgbm's best error=0.0248,     best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 8, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.4s,  estimator xgboost's best error=0.0315,  best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 9, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.4s,  estimator xgboost's best error=0.0315,  best estimator lgbm's best error=0.0248\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 10, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.4s,  estimator xgboost's best error=0.0233,  best estimator xgboost's best error=0.0233\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 11, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.4s,  estimator xgboost's best error=0.0233,  best estimator xgboost's best error=0.0233\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 12, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.4s,  estimator xgboost's best error=0.0233,  best estimator xgboost's best error=0.0233\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 13, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.4s,  estimator xgboost's best error=0.0233,  best estimator xgboost's best error=0.0233\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 14, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.5s,  estimator lgbm's best error=0.0225,     best estimator lgbm's best error=0.0225\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 15, current learner xgboost\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.5s,  estimator xgboost's best error=0.0233,  best estimator lgbm's best error=0.0225\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 16, current learner lgbm\n[flaml.automl: 11-15 07:14:30] {2029} INFO -  at 0.5s,  estimator lgbm's best error=0.0225,     best estimator lgbm's best error=0.0225\n[flaml.automl: 11-15 07:14:30] {1826} INFO - iteration 17, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.5s,  estimator lgbm's best error=0.0225,     best estimator lgbm's best error=0.0225\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 18, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.6s,  estimator lgbm's best error=0.0225,     best estimator lgbm's best error=0.0225\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 19, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.6s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 20, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.6s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 21, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.7s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 22, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.7s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 23, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.8s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 24, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.8s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 25, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.8s,  estimator lgbm's best error=0.0201,     best estimator lgbm's best error=0.0201\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 26, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.9s,  estimator lgbm's best error=0.0197,     best estimator lgbm's best error=0.0197\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 27, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 0.9s,  estimator lgbm's best error=0.0197,     best estimator lgbm's best error=0.0197\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 28, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 1.0s,  estimator lgbm's best error=0.0197,     best estimator lgbm's best error=0.0197\n[flaml.automl: 11-15 07:14:31] {1826} INFO - iteration 29, current learner lgbm\n[flaml.automl: 11-15 07:14:31] {2029} INFO -  at 1.0s,  estimator lgbm's best error=0.0197,     best estimator lgbm's best error=0.0197\n[flaml.automl: 11-15 07:14:31] {2242} INFO - retrain lgbm for 0.0s\n[flaml.automl: 11-15 07:14:31] {2247} INFO - retrained model: LGBMRanker(colsample_bytree=0.9852774042640857,\n           learning_rate=0.034918421933217675, max_bin=1023,\n           min_child_samples=22, n_estimators=6, num_leaves=23,\n           reg_alpha=0.0009765625, reg_lambda=21.505295697527654, verbose=-1)\n[flaml.automl: 11-15 07:14:31] {1608} INFO - fit succeeded\n[flaml.automl: 11-15 07:14:31] {1610} INFO - Time taken to find the best model: 0.8846545219421387\n[flaml.automl: 11-15 07:14:31] {1624} WARNING - Time taken to find the best model is 88% of the provided time budget and not all estimators' hyperparameter search converged. Consider increasing the time budget.\n")))}b.isMDXComponent=!0}}]);