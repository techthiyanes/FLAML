"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2975],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),f=n,g=u["".concat(s,".").concat(f)]||u[f]||c[f]||i;return a?r.createElement(g,l(l({ref:t},m),{},{components:a})):r.createElement(g,l({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1828:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_label:"suggest",title:"default.suggest"},l=void 0,o={unversionedId:"reference/default/suggest",id:"reference/default/suggest",isDocsHomePage:!1,title:"default.suggest",description:"suggest\\_config",source:"@site/docs/reference/default/suggest.md",sourceDirName:"reference/default",slug:"/reference/default/suggest",permalink:"/FLAML/docs/reference/default/suggest",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/default/suggest.md",tags:[],version:"current",frontMatter:{sidebar_label:"suggest",title:"default.suggest"},sidebar:"referenceSideBar",previous:{title:"portfolio",permalink:"/FLAML/docs/reference/default/portfolio"},next:{title:"completion",permalink:"/FLAML/docs/reference/integrations/oai/completion"}},s=[{value:"suggest_config",id:"suggest_config",children:[],level:4},{value:"suggest_learner",id:"suggest_learner",children:[],level:4},{value:"suggest_hyperparams",id:"suggest_hyperparams",children:[],level:4},{value:"preprocess_and_suggest_hyperparams",id:"preprocess_and_suggest_hyperparams",children:[],level:4}],p={toc:s};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"suggest_config"},"suggest","_","config"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def suggest_config(task, X, y, estimator_or_predictor, location=None, k=None)\n")),(0,n.kt)("p",null,"Suggest a list of configs for the given task and training data."),(0,n.kt)("p",null,"The returned configs can be used as starting points for AutoML.fit().\n",(0,n.kt)("inlineCode",{parentName:"p"},"FLAML_sample_size")," is removed from the configs."),(0,n.kt)("h4",{id:"suggest_learner"},"suggest","_","learner"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'def suggest_learner(task, X, y, estimator_or_predictor="all", estimator_list=None, location=None)\n')),(0,n.kt)("p",null,"Suggest best learner within estimator_list."),(0,n.kt)("h4",{id:"suggest_hyperparams"},"suggest","_","hyperparams"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def suggest_hyperparams(task, X, y, estimator_or_predictor, location=None)\n")),(0,n.kt)("p",null,"Suggest hyperparameter configurations and an estimator class."),(0,n.kt)("p",null,"The configurations can be used to initialize the estimator class like lightgbm.LGBMRegressor."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'hyperparams, estimator_class = suggest_hyperparams("regression", X_train, y_train, "lgbm")\nmodel = estimator_class(**hyperparams)  # estimator_class is LGBMRegressor\nmodel.fit(X_train, y_train)\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"task")," - A string of the task type, e.g.,\n'classification', 'regression', 'ts_forecast', 'rank',\n'seq-classification', 'seq-regression'."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"X")," - A dataframe of training data in shape n*m.\nFor 'ts_forecast' task, the first column of X_train\nmust be the timestamp column (datetime type). Other\ncolumns in the dataframe are assumed to be exogenous\nvariables (categorical or numeric)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"y")," - A series of labels in shape n*1."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"estimator_or_predictor")," - A str of the learner name or a dict of the learned config predictor.\nIf a dict, it contains:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"version": a str of the version number.'),(0,n.kt)("li",{parentName:"ul"},'"preprocessing": a dictionary containing:')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"center": a list of meta feature value offsets for normalization.'),(0,n.kt)("li",{parentName:"ul"},'"scale": a list of meta feature scales to normalize each dimension.')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"neighbors": a list of dictionaries. Each dictionary contains:')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"features": a list of the normalized meta features for a neighbor.'),(0,n.kt)("li",{parentName:"ul"},'"choice": an integer of the configuration id in the portfolio.')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"portfolio": a list of dictionaries, each corresponding to a configuration:')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"class": a str of the learner name.'),(0,n.kt)("li",{parentName:"ul"},'"hyperparameters": a dict of the config. The key "FLAML_sample_size" will be ignored.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"location")," - (Optional) A str of the location containing mined portfolio file.\nOnly valid when the portfolio is a str, by default the location is flaml/default.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"hyperparams")," - A dict of the hyperparameter configurations."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"estiamtor_class")," - A class of the underlying estimator, e.g., lightgbm.LGBMClassifier.")),(0,n.kt)("h4",{id:"preprocess_and_suggest_hyperparams"},"preprocess","_","and","_","suggest","_","hyperparams"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def preprocess_and_suggest_hyperparams(task, X, y, estimator_or_predictor, location=None)\n")),(0,n.kt)("p",null,"Preprocess the data and suggest hyperparameters."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'hyperparams, estimator_class, X, y, feature_transformer, label_transformer = \\\n    preprocess_and_suggest_hyperparams("classification", X_train, y_train, "xgb_limitdepth")\nmodel = estimator_class(**hyperparams)  # estimator_class is XGBClassifier\nmodel.fit(X, y)\nX_test = feature_transformer.transform(X_test)\ny_pred = label_transformer.inverse_transform(pd.Series(model.predict(X_test).astype(int)))\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"task")," - A string of the task type, e.g.,\n'classification', 'regression', 'ts_forecast', 'rank',\n'seq-classification', 'seq-regression'."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"X")," - A dataframe of training data in shape n*m.\nFor 'ts_forecast' task, the first column of X_train\nmust be the timestamp column (datetime type). Other\ncolumns in the dataframe are assumed to be exogenous\nvariables (categorical or numeric)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"y")," - A series of labels in shape n*1."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"estimator_or_predictor"),' - A str of the learner name or a dict of the learned config predictor.\n"choose_xgb" means choosing between xgb_limitdepth and xgboost.\nIf a dict, it contains:',(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"version": a str of the version number.'),(0,n.kt)("li",{parentName:"ul"},'"preprocessing": a dictionary containing:')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"center": a list of meta feature value offsets for normalization.'),(0,n.kt)("li",{parentName:"ul"},'"scale": a list of meta feature scales to normalize each dimension.')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"neighbors": a list of dictionaries. Each dictionary contains:')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"features": a list of the normalized meta features for a neighbor.'),(0,n.kt)("li",{parentName:"ul"},'"choice": a integer of the configuration id in the portfolio.')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"portfolio": a list of dictionaries, each corresponding to a configuration:')),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'"class": a str of the learner name.'),(0,n.kt)("li",{parentName:"ul"},'"hyperparameters": a dict of the config. They key "FLAML_sample_size" will be ignored.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"location")," - (Optional) A str of the location containing mined portfolio file.\nOnly valid when the portfolio is a str, by default the location is flaml/default.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"hyperparams")," - A dict of the hyperparameter configurations."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"estiamtor_class")," - A class of the underlying estimator, e.g., lightgbm.LGBMClassifier."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"X")," - the preprocessed X."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"y")," - the preprocessed y."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"feature_transformer")," - a data transformer that can be applied to X_test."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"label_transformer")," - a label transformer that can be applied to y_test.")))}m.isMDXComponent=!0}}]);