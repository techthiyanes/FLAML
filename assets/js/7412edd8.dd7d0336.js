"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5485],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2920:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_label:"ml",title:"automl.ml"},o=void 0,i={unversionedId:"reference/automl/ml",id:"reference/automl/ml",isDocsHomePage:!1,title:"automl.ml",description:"get\\estimator\\class",source:"@site/docs/reference/automl/ml.md",sourceDirName:"reference/automl",slug:"/reference/automl/ml",permalink:"/FLAML/docs/reference/automl/ml",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/automl/ml.md",tags:[],version:"current",frontMatter:{sidebar_label:"ml",title:"automl.ml"},sidebar:"referenceSideBar",previous:{title:"data",permalink:"/FLAML/docs/reference/automl/data"},next:{title:"model",permalink:"/FLAML/docs/reference/automl/model"}},s=[{value:"get_estimator_class",id:"get_estimator_class",children:[],level:4},{value:"sklearn_metric_loss_score",id:"sklearn_metric_loss_score",children:[],level:4},{value:"norm_confusion_matrix",id:"norm_confusion_matrix",children:[],level:4},{value:"multi_class_curves",id:"multi_class_curves",children:[],level:4}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"get_estimator_class"},"get","_","estimator","_","class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_estimator_class(task: str, estimator_name: str) -> EstimatorSubclass\n")),(0,a.kt)("p",null,"Given a task and an estimator name, return the relevant flaml-wrapped estimator class"),(0,a.kt)("p",null,"NOTE: See why the return type is declarad by using TypeVar here on the mypy doc\n",(0,a.kt)("a",{parentName:"p",href:"https://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-type-of-class-objects"},"https://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-type-of-class-objects")),(0,a.kt)("h4",{id:"sklearn_metric_loss_score"},"sklearn","_","metric","_","loss","_","score"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def sklearn_metric_loss_score(metric_name: str, y_predict, y_true, labels=None, sample_weight=None, groups=None)\n")),(0,a.kt)("p",null,"Loss using the specified metric."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metric_name")," - A string of the metric name, one of\n'r2', 'rmse', 'mae', 'mse', 'accuracy', 'roc_auc', 'roc_auc_ovr',\n'roc_auc_ovo', 'roc_auc_weighted', 'roc_auc_ovo_weighted', 'roc_auc_ovr_weighted',\n'log_loss', 'mape', 'f1', 'ap', 'ndcg', 'micro_f1', 'macro_f1'."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_predict")," - A 1d or 2d numpy array of the predictions which can be\nused to calculate the metric. E.g., 2d for log_loss and 1d\nfor others."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_true")," - A 1d numpy array of the true labels."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"labels")," - A list or an array of the unique labels."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sample_weight")," - A 1d numpy array of the sample weight."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"groups")," - A 1d numpy array of the group labels.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"score")," - A float number of the loss, the lower the better.")),(0,a.kt)("h4",{id:"norm_confusion_matrix"},"norm","_","confusion","_","matrix"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def norm_confusion_matrix(y_true: Union[np.array, pd.Series], y_pred: Union[np.array, pd.Series])\n")),(0,a.kt)("p",null,"normalized confusion matrix."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"estimator")," - A multi-class classification estimator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_true")," - A numpy array or a pandas series of true labels."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_pred")," - A numpy array or a pandas series of predicted labels.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A normalized confusion matrix."),(0,a.kt)("h4",{id:"multi_class_curves"},"multi","_","class","_","curves"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def multi_class_curves(y_true: Union[np.array, pd.Series], y_pred_proba: Union[np.array, pd.Series], curve_func: Callable)\n")),(0,a.kt)("p",null,"Binarize the data for multi-class tasks and produce ROC or precision-recall curves."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_true")," - A numpy array or a pandas series of true labels."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_pred_proba")," - A numpy array or a pandas dataframe of predicted probabilites."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"curve_func")," - A function to produce a curve (e.g., roc_curve or precision_recall_curve).")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  A tuple of two dictionaries with the same set of keys (class indices).\nThe first dictionary curve_x stores the x coordinates of each curve, e.g.,\ncurve_x","[0]"," is an 1D array of the x coordinates of class 0.\nThe second dictionary curve_y stores the y coordinates of each curve, e.g.,\ncurve_y","[0]"," is an 1D array of the y coordinates of class 0."))}u.isMDXComponent=!0}}]);